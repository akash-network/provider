// Code generated by mockery v2.23.1. DO NOT EDIT.

package kubernetes_mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	v1beta1 "k8s.io/api/certificates/v1beta1"
)

// CertificateSigningRequestExpansion is an autogenerated mock type for the CertificateSigningRequestExpansion type
type CertificateSigningRequestExpansion struct {
	mock.Mock
}

type CertificateSigningRequestExpansion_Expecter struct {
	mock *mock.Mock
}

func (_m *CertificateSigningRequestExpansion) EXPECT() *CertificateSigningRequestExpansion_Expecter {
	return &CertificateSigningRequestExpansion_Expecter{mock: &_m.Mock}
}

// UpdateApproval provides a mock function with given fields: ctx, certificateSigningRequest, opts
func (_m *CertificateSigningRequestExpansion) UpdateApproval(ctx context.Context, certificateSigningRequest *v1beta1.CertificateSigningRequest, opts v1.UpdateOptions) (*v1beta1.CertificateSigningRequest, error) {
	ret := _m.Called(ctx, certificateSigningRequest, opts)

	var r0 *v1beta1.CertificateSigningRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1beta1.CertificateSigningRequest, v1.UpdateOptions) (*v1beta1.CertificateSigningRequest, error)); ok {
		return rf(ctx, certificateSigningRequest, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1beta1.CertificateSigningRequest, v1.UpdateOptions) *v1beta1.CertificateSigningRequest); ok {
		r0 = rf(ctx, certificateSigningRequest, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1beta1.CertificateSigningRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1beta1.CertificateSigningRequest, v1.UpdateOptions) error); ok {
		r1 = rf(ctx, certificateSigningRequest, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CertificateSigningRequestExpansion_UpdateApproval_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateApproval'
type CertificateSigningRequestExpansion_UpdateApproval_Call struct {
	*mock.Call
}

// UpdateApproval is a helper method to define mock.On call
//   - ctx context.Context
//   - certificateSigningRequest *v1beta1.CertificateSigningRequest
//   - opts v1.UpdateOptions
func (_e *CertificateSigningRequestExpansion_Expecter) UpdateApproval(ctx interface{}, certificateSigningRequest interface{}, opts interface{}) *CertificateSigningRequestExpansion_UpdateApproval_Call {
	return &CertificateSigningRequestExpansion_UpdateApproval_Call{Call: _e.mock.On("UpdateApproval", ctx, certificateSigningRequest, opts)}
}

func (_c *CertificateSigningRequestExpansion_UpdateApproval_Call) Run(run func(ctx context.Context, certificateSigningRequest *v1beta1.CertificateSigningRequest, opts v1.UpdateOptions)) *CertificateSigningRequestExpansion_UpdateApproval_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1beta1.CertificateSigningRequest), args[2].(v1.UpdateOptions))
	})
	return _c
}

func (_c *CertificateSigningRequestExpansion_UpdateApproval_Call) Return(result *v1beta1.CertificateSigningRequest, err error) *CertificateSigningRequestExpansion_UpdateApproval_Call {
	_c.Call.Return(result, err)
	return _c
}

func (_c *CertificateSigningRequestExpansion_UpdateApproval_Call) RunAndReturn(run func(context.Context, *v1beta1.CertificateSigningRequest, v1.UpdateOptions) (*v1beta1.CertificateSigningRequest, error)) *CertificateSigningRequestExpansion_UpdateApproval_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewCertificateSigningRequestExpansion interface {
	mock.TestingT
	Cleanup(func())
}

// NewCertificateSigningRequestExpansion creates a new instance of CertificateSigningRequestExpansion. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCertificateSigningRequestExpansion(t mockConstructorTestingTNewCertificateSigningRequestExpansion) *CertificateSigningRequestExpansion {
	mock := &CertificateSigningRequestExpansion{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
