// Code generated by mockery v2.23.1. DO NOT EDIT.

package kubernetes_mocks

import (
	mock "github.com/stretchr/testify/mock"
	v1 "k8s.io/client-go/kubernetes/typed/networking/v1"
)

// IngressesGetter is an autogenerated mock type for the IngressesGetter type
type IngressesGetter struct {
	mock.Mock
}

type IngressesGetter_Expecter struct {
	mock *mock.Mock
}

func (_m *IngressesGetter) EXPECT() *IngressesGetter_Expecter {
	return &IngressesGetter_Expecter{mock: &_m.Mock}
}

// Ingresses provides a mock function with given fields: namespace
func (_m *IngressesGetter) Ingresses(namespace string) v1.IngressInterface {
	ret := _m.Called(namespace)

	var r0 v1.IngressInterface
	if rf, ok := ret.Get(0).(func(string) v1.IngressInterface); ok {
		r0 = rf(namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1.IngressInterface)
		}
	}

	return r0
}

// IngressesGetter_Ingresses_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ingresses'
type IngressesGetter_Ingresses_Call struct {
	*mock.Call
}

// Ingresses is a helper method to define mock.On call
//   - namespace string
func (_e *IngressesGetter_Expecter) Ingresses(namespace interface{}) *IngressesGetter_Ingresses_Call {
	return &IngressesGetter_Ingresses_Call{Call: _e.mock.On("Ingresses", namespace)}
}

func (_c *IngressesGetter_Ingresses_Call) Run(run func(namespace string)) *IngressesGetter_Ingresses_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *IngressesGetter_Ingresses_Call) Return(_a0 v1.IngressInterface) *IngressesGetter_Ingresses_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IngressesGetter_Ingresses_Call) RunAndReturn(run func(string) v1.IngressInterface) *IngressesGetter_Ingresses_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewIngressesGetter interface {
	mock.TestingT
	Cleanup(func())
}

// NewIngressesGetter creates a new instance of IngressesGetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIngressesGetter(t mockConstructorTestingTNewIngressesGetter) *IngressesGetter {
	mock := &IngressesGetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
