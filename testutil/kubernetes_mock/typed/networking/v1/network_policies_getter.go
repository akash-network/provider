// Code generated by mockery v2.23.1. DO NOT EDIT.

package kubernetes_mocks

import (
	mock "github.com/stretchr/testify/mock"
	v1 "k8s.io/client-go/kubernetes/typed/networking/v1"
)

// NetworkPoliciesGetter is an autogenerated mock type for the NetworkPoliciesGetter type
type NetworkPoliciesGetter struct {
	mock.Mock
}

type NetworkPoliciesGetter_Expecter struct {
	mock *mock.Mock
}

func (_m *NetworkPoliciesGetter) EXPECT() *NetworkPoliciesGetter_Expecter {
	return &NetworkPoliciesGetter_Expecter{mock: &_m.Mock}
}

// NetworkPolicies provides a mock function with given fields: namespace
func (_m *NetworkPoliciesGetter) NetworkPolicies(namespace string) v1.NetworkPolicyInterface {
	ret := _m.Called(namespace)

	var r0 v1.NetworkPolicyInterface
	if rf, ok := ret.Get(0).(func(string) v1.NetworkPolicyInterface); ok {
		r0 = rf(namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1.NetworkPolicyInterface)
		}
	}

	return r0
}

// NetworkPoliciesGetter_NetworkPolicies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NetworkPolicies'
type NetworkPoliciesGetter_NetworkPolicies_Call struct {
	*mock.Call
}

// NetworkPolicies is a helper method to define mock.On call
//   - namespace string
func (_e *NetworkPoliciesGetter_Expecter) NetworkPolicies(namespace interface{}) *NetworkPoliciesGetter_NetworkPolicies_Call {
	return &NetworkPoliciesGetter_NetworkPolicies_Call{Call: _e.mock.On("NetworkPolicies", namespace)}
}

func (_c *NetworkPoliciesGetter_NetworkPolicies_Call) Run(run func(namespace string)) *NetworkPoliciesGetter_NetworkPolicies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *NetworkPoliciesGetter_NetworkPolicies_Call) Return(_a0 v1.NetworkPolicyInterface) *NetworkPoliciesGetter_NetworkPolicies_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NetworkPoliciesGetter_NetworkPolicies_Call) RunAndReturn(run func(string) v1.NetworkPolicyInterface) *NetworkPoliciesGetter_NetworkPolicies_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewNetworkPoliciesGetter interface {
	mock.TestingT
	Cleanup(func())
}

// NewNetworkPoliciesGetter creates a new instance of NetworkPoliciesGetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewNetworkPoliciesGetter(t mockConstructorTestingTNewNetworkPoliciesGetter) *NetworkPoliciesGetter {
	mock := &NetworkPoliciesGetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
