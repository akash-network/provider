// Code generated by mockery v2.23.1. DO NOT EDIT.

package kubernetes_mocks

import (
	mock "github.com/stretchr/testify/mock"
	rest "k8s.io/client-go/rest"

	v1beta1 "k8s.io/client-go/kubernetes/typed/extensions/v1beta1"
)

// ExtensionsV1beta1Interface is an autogenerated mock type for the ExtensionsV1beta1Interface type
type ExtensionsV1beta1Interface struct {
	mock.Mock
}

type ExtensionsV1beta1Interface_Expecter struct {
	mock *mock.Mock
}

func (_m *ExtensionsV1beta1Interface) EXPECT() *ExtensionsV1beta1Interface_Expecter {
	return &ExtensionsV1beta1Interface_Expecter{mock: &_m.Mock}
}

// DaemonSets provides a mock function with given fields: namespace
func (_m *ExtensionsV1beta1Interface) DaemonSets(namespace string) v1beta1.DaemonSetInterface {
	ret := _m.Called(namespace)

	var r0 v1beta1.DaemonSetInterface
	if rf, ok := ret.Get(0).(func(string) v1beta1.DaemonSetInterface); ok {
		r0 = rf(namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1beta1.DaemonSetInterface)
		}
	}

	return r0
}

// ExtensionsV1beta1Interface_DaemonSets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DaemonSets'
type ExtensionsV1beta1Interface_DaemonSets_Call struct {
	*mock.Call
}

// DaemonSets is a helper method to define mock.On call
//   - namespace string
func (_e *ExtensionsV1beta1Interface_Expecter) DaemonSets(namespace interface{}) *ExtensionsV1beta1Interface_DaemonSets_Call {
	return &ExtensionsV1beta1Interface_DaemonSets_Call{Call: _e.mock.On("DaemonSets", namespace)}
}

func (_c *ExtensionsV1beta1Interface_DaemonSets_Call) Run(run func(namespace string)) *ExtensionsV1beta1Interface_DaemonSets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ExtensionsV1beta1Interface_DaemonSets_Call) Return(_a0 v1beta1.DaemonSetInterface) *ExtensionsV1beta1Interface_DaemonSets_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExtensionsV1beta1Interface_DaemonSets_Call) RunAndReturn(run func(string) v1beta1.DaemonSetInterface) *ExtensionsV1beta1Interface_DaemonSets_Call {
	_c.Call.Return(run)
	return _c
}

// Deployments provides a mock function with given fields: namespace
func (_m *ExtensionsV1beta1Interface) Deployments(namespace string) v1beta1.DeploymentInterface {
	ret := _m.Called(namespace)

	var r0 v1beta1.DeploymentInterface
	if rf, ok := ret.Get(0).(func(string) v1beta1.DeploymentInterface); ok {
		r0 = rf(namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1beta1.DeploymentInterface)
		}
	}

	return r0
}

// ExtensionsV1beta1Interface_Deployments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Deployments'
type ExtensionsV1beta1Interface_Deployments_Call struct {
	*mock.Call
}

// Deployments is a helper method to define mock.On call
//   - namespace string
func (_e *ExtensionsV1beta1Interface_Expecter) Deployments(namespace interface{}) *ExtensionsV1beta1Interface_Deployments_Call {
	return &ExtensionsV1beta1Interface_Deployments_Call{Call: _e.mock.On("Deployments", namespace)}
}

func (_c *ExtensionsV1beta1Interface_Deployments_Call) Run(run func(namespace string)) *ExtensionsV1beta1Interface_Deployments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ExtensionsV1beta1Interface_Deployments_Call) Return(_a0 v1beta1.DeploymentInterface) *ExtensionsV1beta1Interface_Deployments_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExtensionsV1beta1Interface_Deployments_Call) RunAndReturn(run func(string) v1beta1.DeploymentInterface) *ExtensionsV1beta1Interface_Deployments_Call {
	_c.Call.Return(run)
	return _c
}

// Ingresses provides a mock function with given fields: namespace
func (_m *ExtensionsV1beta1Interface) Ingresses(namespace string) v1beta1.IngressInterface {
	ret := _m.Called(namespace)

	var r0 v1beta1.IngressInterface
	if rf, ok := ret.Get(0).(func(string) v1beta1.IngressInterface); ok {
		r0 = rf(namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1beta1.IngressInterface)
		}
	}

	return r0
}

// ExtensionsV1beta1Interface_Ingresses_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ingresses'
type ExtensionsV1beta1Interface_Ingresses_Call struct {
	*mock.Call
}

// Ingresses is a helper method to define mock.On call
//   - namespace string
func (_e *ExtensionsV1beta1Interface_Expecter) Ingresses(namespace interface{}) *ExtensionsV1beta1Interface_Ingresses_Call {
	return &ExtensionsV1beta1Interface_Ingresses_Call{Call: _e.mock.On("Ingresses", namespace)}
}

func (_c *ExtensionsV1beta1Interface_Ingresses_Call) Run(run func(namespace string)) *ExtensionsV1beta1Interface_Ingresses_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ExtensionsV1beta1Interface_Ingresses_Call) Return(_a0 v1beta1.IngressInterface) *ExtensionsV1beta1Interface_Ingresses_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExtensionsV1beta1Interface_Ingresses_Call) RunAndReturn(run func(string) v1beta1.IngressInterface) *ExtensionsV1beta1Interface_Ingresses_Call {
	_c.Call.Return(run)
	return _c
}

// NetworkPolicies provides a mock function with given fields: namespace
func (_m *ExtensionsV1beta1Interface) NetworkPolicies(namespace string) v1beta1.NetworkPolicyInterface {
	ret := _m.Called(namespace)

	var r0 v1beta1.NetworkPolicyInterface
	if rf, ok := ret.Get(0).(func(string) v1beta1.NetworkPolicyInterface); ok {
		r0 = rf(namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1beta1.NetworkPolicyInterface)
		}
	}

	return r0
}

// ExtensionsV1beta1Interface_NetworkPolicies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NetworkPolicies'
type ExtensionsV1beta1Interface_NetworkPolicies_Call struct {
	*mock.Call
}

// NetworkPolicies is a helper method to define mock.On call
//   - namespace string
func (_e *ExtensionsV1beta1Interface_Expecter) NetworkPolicies(namespace interface{}) *ExtensionsV1beta1Interface_NetworkPolicies_Call {
	return &ExtensionsV1beta1Interface_NetworkPolicies_Call{Call: _e.mock.On("NetworkPolicies", namespace)}
}

func (_c *ExtensionsV1beta1Interface_NetworkPolicies_Call) Run(run func(namespace string)) *ExtensionsV1beta1Interface_NetworkPolicies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ExtensionsV1beta1Interface_NetworkPolicies_Call) Return(_a0 v1beta1.NetworkPolicyInterface) *ExtensionsV1beta1Interface_NetworkPolicies_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExtensionsV1beta1Interface_NetworkPolicies_Call) RunAndReturn(run func(string) v1beta1.NetworkPolicyInterface) *ExtensionsV1beta1Interface_NetworkPolicies_Call {
	_c.Call.Return(run)
	return _c
}

// PodSecurityPolicies provides a mock function with given fields:
func (_m *ExtensionsV1beta1Interface) PodSecurityPolicies() v1beta1.PodSecurityPolicyInterface {
	ret := _m.Called()

	var r0 v1beta1.PodSecurityPolicyInterface
	if rf, ok := ret.Get(0).(func() v1beta1.PodSecurityPolicyInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1beta1.PodSecurityPolicyInterface)
		}
	}

	return r0
}

// ExtensionsV1beta1Interface_PodSecurityPolicies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PodSecurityPolicies'
type ExtensionsV1beta1Interface_PodSecurityPolicies_Call struct {
	*mock.Call
}

// PodSecurityPolicies is a helper method to define mock.On call
func (_e *ExtensionsV1beta1Interface_Expecter) PodSecurityPolicies() *ExtensionsV1beta1Interface_PodSecurityPolicies_Call {
	return &ExtensionsV1beta1Interface_PodSecurityPolicies_Call{Call: _e.mock.On("PodSecurityPolicies")}
}

func (_c *ExtensionsV1beta1Interface_PodSecurityPolicies_Call) Run(run func()) *ExtensionsV1beta1Interface_PodSecurityPolicies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExtensionsV1beta1Interface_PodSecurityPolicies_Call) Return(_a0 v1beta1.PodSecurityPolicyInterface) *ExtensionsV1beta1Interface_PodSecurityPolicies_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExtensionsV1beta1Interface_PodSecurityPolicies_Call) RunAndReturn(run func() v1beta1.PodSecurityPolicyInterface) *ExtensionsV1beta1Interface_PodSecurityPolicies_Call {
	_c.Call.Return(run)
	return _c
}

// RESTClient provides a mock function with given fields:
func (_m *ExtensionsV1beta1Interface) RESTClient() rest.Interface {
	ret := _m.Called()

	var r0 rest.Interface
	if rf, ok := ret.Get(0).(func() rest.Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(rest.Interface)
		}
	}

	return r0
}

// ExtensionsV1beta1Interface_RESTClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RESTClient'
type ExtensionsV1beta1Interface_RESTClient_Call struct {
	*mock.Call
}

// RESTClient is a helper method to define mock.On call
func (_e *ExtensionsV1beta1Interface_Expecter) RESTClient() *ExtensionsV1beta1Interface_RESTClient_Call {
	return &ExtensionsV1beta1Interface_RESTClient_Call{Call: _e.mock.On("RESTClient")}
}

func (_c *ExtensionsV1beta1Interface_RESTClient_Call) Run(run func()) *ExtensionsV1beta1Interface_RESTClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExtensionsV1beta1Interface_RESTClient_Call) Return(_a0 rest.Interface) *ExtensionsV1beta1Interface_RESTClient_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExtensionsV1beta1Interface_RESTClient_Call) RunAndReturn(run func() rest.Interface) *ExtensionsV1beta1Interface_RESTClient_Call {
	_c.Call.Return(run)
	return _c
}

// ReplicaSets provides a mock function with given fields: namespace
func (_m *ExtensionsV1beta1Interface) ReplicaSets(namespace string) v1beta1.ReplicaSetInterface {
	ret := _m.Called(namespace)

	var r0 v1beta1.ReplicaSetInterface
	if rf, ok := ret.Get(0).(func(string) v1beta1.ReplicaSetInterface); ok {
		r0 = rf(namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1beta1.ReplicaSetInterface)
		}
	}

	return r0
}

// ExtensionsV1beta1Interface_ReplicaSets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReplicaSets'
type ExtensionsV1beta1Interface_ReplicaSets_Call struct {
	*mock.Call
}

// ReplicaSets is a helper method to define mock.On call
//   - namespace string
func (_e *ExtensionsV1beta1Interface_Expecter) ReplicaSets(namespace interface{}) *ExtensionsV1beta1Interface_ReplicaSets_Call {
	return &ExtensionsV1beta1Interface_ReplicaSets_Call{Call: _e.mock.On("ReplicaSets", namespace)}
}

func (_c *ExtensionsV1beta1Interface_ReplicaSets_Call) Run(run func(namespace string)) *ExtensionsV1beta1Interface_ReplicaSets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ExtensionsV1beta1Interface_ReplicaSets_Call) Return(_a0 v1beta1.ReplicaSetInterface) *ExtensionsV1beta1Interface_ReplicaSets_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExtensionsV1beta1Interface_ReplicaSets_Call) RunAndReturn(run func(string) v1beta1.ReplicaSetInterface) *ExtensionsV1beta1Interface_ReplicaSets_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewExtensionsV1beta1Interface interface {
	mock.TestingT
	Cleanup(func())
}

// NewExtensionsV1beta1Interface creates a new instance of ExtensionsV1beta1Interface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewExtensionsV1beta1Interface(t mockConstructorTestingTNewExtensionsV1beta1Interface) *ExtensionsV1beta1Interface {
	mock := &ExtensionsV1beta1Interface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
