// Code generated by mockery v2.23.1. DO NOT EDIT.

package kubernetes_mocks

import (
	mock "github.com/stretchr/testify/mock"
	v1beta2 "k8s.io/client-go/kubernetes/typed/apps/v1beta2"
)

// ReplicaSetsGetter is an autogenerated mock type for the ReplicaSetsGetter type
type ReplicaSetsGetter struct {
	mock.Mock
}

type ReplicaSetsGetter_Expecter struct {
	mock *mock.Mock
}

func (_m *ReplicaSetsGetter) EXPECT() *ReplicaSetsGetter_Expecter {
	return &ReplicaSetsGetter_Expecter{mock: &_m.Mock}
}

// ReplicaSets provides a mock function with given fields: namespace
func (_m *ReplicaSetsGetter) ReplicaSets(namespace string) v1beta2.ReplicaSetInterface {
	ret := _m.Called(namespace)

	var r0 v1beta2.ReplicaSetInterface
	if rf, ok := ret.Get(0).(func(string) v1beta2.ReplicaSetInterface); ok {
		r0 = rf(namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1beta2.ReplicaSetInterface)
		}
	}

	return r0
}

// ReplicaSetsGetter_ReplicaSets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReplicaSets'
type ReplicaSetsGetter_ReplicaSets_Call struct {
	*mock.Call
}

// ReplicaSets is a helper method to define mock.On call
//   - namespace string
func (_e *ReplicaSetsGetter_Expecter) ReplicaSets(namespace interface{}) *ReplicaSetsGetter_ReplicaSets_Call {
	return &ReplicaSetsGetter_ReplicaSets_Call{Call: _e.mock.On("ReplicaSets", namespace)}
}

func (_c *ReplicaSetsGetter_ReplicaSets_Call) Run(run func(namespace string)) *ReplicaSetsGetter_ReplicaSets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ReplicaSetsGetter_ReplicaSets_Call) Return(_a0 v1beta2.ReplicaSetInterface) *ReplicaSetsGetter_ReplicaSets_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ReplicaSetsGetter_ReplicaSets_Call) RunAndReturn(run func(string) v1beta2.ReplicaSetInterface) *ReplicaSetsGetter_ReplicaSets_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewReplicaSetsGetter interface {
	mock.TestingT
	Cleanup(func())
}

// NewReplicaSetsGetter creates a new instance of ReplicaSetsGetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewReplicaSetsGetter(t mockConstructorTestingTNewReplicaSetsGetter) *ReplicaSetsGetter {
	mock := &ReplicaSetsGetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
