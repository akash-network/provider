// Code generated by mockery v2.23.1. DO NOT EDIT.

package kubernetes_mocks

import (
	mock "github.com/stretchr/testify/mock"
	v1alpha1 "k8s.io/client-go/kubernetes/typed/rbac/v1alpha1"
)

// RoleBindingsGetter is an autogenerated mock type for the RoleBindingsGetter type
type RoleBindingsGetter struct {
	mock.Mock
}

type RoleBindingsGetter_Expecter struct {
	mock *mock.Mock
}

func (_m *RoleBindingsGetter) EXPECT() *RoleBindingsGetter_Expecter {
	return &RoleBindingsGetter_Expecter{mock: &_m.Mock}
}

// RoleBindings provides a mock function with given fields: namespace
func (_m *RoleBindingsGetter) RoleBindings(namespace string) v1alpha1.RoleBindingInterface {
	ret := _m.Called(namespace)

	var r0 v1alpha1.RoleBindingInterface
	if rf, ok := ret.Get(0).(func(string) v1alpha1.RoleBindingInterface); ok {
		r0 = rf(namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1alpha1.RoleBindingInterface)
		}
	}

	return r0
}

// RoleBindingsGetter_RoleBindings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RoleBindings'
type RoleBindingsGetter_RoleBindings_Call struct {
	*mock.Call
}

// RoleBindings is a helper method to define mock.On call
//   - namespace string
func (_e *RoleBindingsGetter_Expecter) RoleBindings(namespace interface{}) *RoleBindingsGetter_RoleBindings_Call {
	return &RoleBindingsGetter_RoleBindings_Call{Call: _e.mock.On("RoleBindings", namespace)}
}

func (_c *RoleBindingsGetter_RoleBindings_Call) Run(run func(namespace string)) *RoleBindingsGetter_RoleBindings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *RoleBindingsGetter_RoleBindings_Call) Return(_a0 v1alpha1.RoleBindingInterface) *RoleBindingsGetter_RoleBindings_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RoleBindingsGetter_RoleBindings_Call) RunAndReturn(run func(string) v1alpha1.RoleBindingInterface) *RoleBindingsGetter_RoleBindings_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewRoleBindingsGetter interface {
	mock.TestingT
	Cleanup(func())
}

// NewRoleBindingsGetter creates a new instance of RoleBindingsGetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRoleBindingsGetter(t mockConstructorTestingTNewRoleBindingsGetter) *RoleBindingsGetter {
	mock := &RoleBindingsGetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
