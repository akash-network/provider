// Code generated by mockery v2.23.1. DO NOT EDIT.

package kubernetes_mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	rbacv1 "k8s.io/api/rbac/v1"

	types "k8s.io/apimachinery/pkg/types"

	v1 "k8s.io/client-go/applyconfigurations/rbac/v1"

	watch "k8s.io/apimachinery/pkg/watch"
)

// RoleBindingInterface is an autogenerated mock type for the RoleBindingInterface type
type RoleBindingInterface struct {
	mock.Mock
}

type RoleBindingInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *RoleBindingInterface) EXPECT() *RoleBindingInterface_Expecter {
	return &RoleBindingInterface_Expecter{mock: &_m.Mock}
}

// Apply provides a mock function with given fields: ctx, roleBinding, opts
func (_m *RoleBindingInterface) Apply(ctx context.Context, roleBinding *v1.RoleBindingApplyConfiguration, opts metav1.ApplyOptions) (*rbacv1.RoleBinding, error) {
	ret := _m.Called(ctx, roleBinding, opts)

	var r0 *rbacv1.RoleBinding
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.RoleBindingApplyConfiguration, metav1.ApplyOptions) (*rbacv1.RoleBinding, error)); ok {
		return rf(ctx, roleBinding, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.RoleBindingApplyConfiguration, metav1.ApplyOptions) *rbacv1.RoleBinding); ok {
		r0 = rf(ctx, roleBinding, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rbacv1.RoleBinding)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.RoleBindingApplyConfiguration, metav1.ApplyOptions) error); ok {
		r1 = rf(ctx, roleBinding, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RoleBindingInterface_Apply_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Apply'
type RoleBindingInterface_Apply_Call struct {
	*mock.Call
}

// Apply is a helper method to define mock.On call
//   - ctx context.Context
//   - roleBinding *v1.RoleBindingApplyConfiguration
//   - opts metav1.ApplyOptions
func (_e *RoleBindingInterface_Expecter) Apply(ctx interface{}, roleBinding interface{}, opts interface{}) *RoleBindingInterface_Apply_Call {
	return &RoleBindingInterface_Apply_Call{Call: _e.mock.On("Apply", ctx, roleBinding, opts)}
}

func (_c *RoleBindingInterface_Apply_Call) Run(run func(ctx context.Context, roleBinding *v1.RoleBindingApplyConfiguration, opts metav1.ApplyOptions)) *RoleBindingInterface_Apply_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1.RoleBindingApplyConfiguration), args[2].(metav1.ApplyOptions))
	})
	return _c
}

func (_c *RoleBindingInterface_Apply_Call) Return(result *rbacv1.RoleBinding, err error) *RoleBindingInterface_Apply_Call {
	_c.Call.Return(result, err)
	return _c
}

func (_c *RoleBindingInterface_Apply_Call) RunAndReturn(run func(context.Context, *v1.RoleBindingApplyConfiguration, metav1.ApplyOptions) (*rbacv1.RoleBinding, error)) *RoleBindingInterface_Apply_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, roleBinding, opts
func (_m *RoleBindingInterface) Create(ctx context.Context, roleBinding *rbacv1.RoleBinding, opts metav1.CreateOptions) (*rbacv1.RoleBinding, error) {
	ret := _m.Called(ctx, roleBinding, opts)

	var r0 *rbacv1.RoleBinding
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rbacv1.RoleBinding, metav1.CreateOptions) (*rbacv1.RoleBinding, error)); ok {
		return rf(ctx, roleBinding, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rbacv1.RoleBinding, metav1.CreateOptions) *rbacv1.RoleBinding); ok {
		r0 = rf(ctx, roleBinding, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rbacv1.RoleBinding)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rbacv1.RoleBinding, metav1.CreateOptions) error); ok {
		r1 = rf(ctx, roleBinding, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RoleBindingInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type RoleBindingInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - roleBinding *rbacv1.RoleBinding
//   - opts metav1.CreateOptions
func (_e *RoleBindingInterface_Expecter) Create(ctx interface{}, roleBinding interface{}, opts interface{}) *RoleBindingInterface_Create_Call {
	return &RoleBindingInterface_Create_Call{Call: _e.mock.On("Create", ctx, roleBinding, opts)}
}

func (_c *RoleBindingInterface_Create_Call) Run(run func(ctx context.Context, roleBinding *rbacv1.RoleBinding, opts metav1.CreateOptions)) *RoleBindingInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*rbacv1.RoleBinding), args[2].(metav1.CreateOptions))
	})
	return _c
}

func (_c *RoleBindingInterface_Create_Call) Return(_a0 *rbacv1.RoleBinding, _a1 error) *RoleBindingInterface_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RoleBindingInterface_Create_Call) RunAndReturn(run func(context.Context, *rbacv1.RoleBinding, metav1.CreateOptions) (*rbacv1.RoleBinding, error)) *RoleBindingInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, name, opts
func (_m *RoleBindingInterface) Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error {
	ret := _m.Called(ctx, name, opts)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, metav1.DeleteOptions) error); ok {
		r0 = rf(ctx, name, opts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RoleBindingInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type RoleBindingInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - opts metav1.DeleteOptions
func (_e *RoleBindingInterface_Expecter) Delete(ctx interface{}, name interface{}, opts interface{}) *RoleBindingInterface_Delete_Call {
	return &RoleBindingInterface_Delete_Call{Call: _e.mock.On("Delete", ctx, name, opts)}
}

func (_c *RoleBindingInterface_Delete_Call) Run(run func(ctx context.Context, name string, opts metav1.DeleteOptions)) *RoleBindingInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(metav1.DeleteOptions))
	})
	return _c
}

func (_c *RoleBindingInterface_Delete_Call) Return(_a0 error) *RoleBindingInterface_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RoleBindingInterface_Delete_Call) RunAndReturn(run func(context.Context, string, metav1.DeleteOptions) error) *RoleBindingInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCollection provides a mock function with given fields: ctx, opts, listOpts
func (_m *RoleBindingInterface) DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error {
	ret := _m.Called(ctx, opts, listOpts)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, metav1.DeleteOptions, metav1.ListOptions) error); ok {
		r0 = rf(ctx, opts, listOpts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RoleBindingInterface_DeleteCollection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCollection'
type RoleBindingInterface_DeleteCollection_Call struct {
	*mock.Call
}

// DeleteCollection is a helper method to define mock.On call
//   - ctx context.Context
//   - opts metav1.DeleteOptions
//   - listOpts metav1.ListOptions
func (_e *RoleBindingInterface_Expecter) DeleteCollection(ctx interface{}, opts interface{}, listOpts interface{}) *RoleBindingInterface_DeleteCollection_Call {
	return &RoleBindingInterface_DeleteCollection_Call{Call: _e.mock.On("DeleteCollection", ctx, opts, listOpts)}
}

func (_c *RoleBindingInterface_DeleteCollection_Call) Run(run func(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions)) *RoleBindingInterface_DeleteCollection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(metav1.DeleteOptions), args[2].(metav1.ListOptions))
	})
	return _c
}

func (_c *RoleBindingInterface_DeleteCollection_Call) Return(_a0 error) *RoleBindingInterface_DeleteCollection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RoleBindingInterface_DeleteCollection_Call) RunAndReturn(run func(context.Context, metav1.DeleteOptions, metav1.ListOptions) error) *RoleBindingInterface_DeleteCollection_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, name, opts
func (_m *RoleBindingInterface) Get(ctx context.Context, name string, opts metav1.GetOptions) (*rbacv1.RoleBinding, error) {
	ret := _m.Called(ctx, name, opts)

	var r0 *rbacv1.RoleBinding
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, metav1.GetOptions) (*rbacv1.RoleBinding, error)); ok {
		return rf(ctx, name, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, metav1.GetOptions) *rbacv1.RoleBinding); ok {
		r0 = rf(ctx, name, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rbacv1.RoleBinding)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, metav1.GetOptions) error); ok {
		r1 = rf(ctx, name, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RoleBindingInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type RoleBindingInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - opts metav1.GetOptions
func (_e *RoleBindingInterface_Expecter) Get(ctx interface{}, name interface{}, opts interface{}) *RoleBindingInterface_Get_Call {
	return &RoleBindingInterface_Get_Call{Call: _e.mock.On("Get", ctx, name, opts)}
}

func (_c *RoleBindingInterface_Get_Call) Run(run func(ctx context.Context, name string, opts metav1.GetOptions)) *RoleBindingInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(metav1.GetOptions))
	})
	return _c
}

func (_c *RoleBindingInterface_Get_Call) Return(_a0 *rbacv1.RoleBinding, _a1 error) *RoleBindingInterface_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RoleBindingInterface_Get_Call) RunAndReturn(run func(context.Context, string, metav1.GetOptions) (*rbacv1.RoleBinding, error)) *RoleBindingInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, opts
func (_m *RoleBindingInterface) List(ctx context.Context, opts metav1.ListOptions) (*rbacv1.RoleBindingList, error) {
	ret := _m.Called(ctx, opts)

	var r0 *rbacv1.RoleBindingList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, metav1.ListOptions) (*rbacv1.RoleBindingList, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, metav1.ListOptions) *rbacv1.RoleBindingList); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rbacv1.RoleBindingList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, metav1.ListOptions) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RoleBindingInterface_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type RoleBindingInterface_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - opts metav1.ListOptions
func (_e *RoleBindingInterface_Expecter) List(ctx interface{}, opts interface{}) *RoleBindingInterface_List_Call {
	return &RoleBindingInterface_List_Call{Call: _e.mock.On("List", ctx, opts)}
}

func (_c *RoleBindingInterface_List_Call) Run(run func(ctx context.Context, opts metav1.ListOptions)) *RoleBindingInterface_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(metav1.ListOptions))
	})
	return _c
}

func (_c *RoleBindingInterface_List_Call) Return(_a0 *rbacv1.RoleBindingList, _a1 error) *RoleBindingInterface_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RoleBindingInterface_List_Call) RunAndReturn(run func(context.Context, metav1.ListOptions) (*rbacv1.RoleBindingList, error)) *RoleBindingInterface_List_Call {
	_c.Call.Return(run)
	return _c
}

// Patch provides a mock function with given fields: ctx, name, pt, data, opts, subresources
func (_m *RoleBindingInterface) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (*rbacv1.RoleBinding, error) {
	_va := make([]interface{}, len(subresources))
	for _i := range subresources {
		_va[_i] = subresources[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, name, pt, data, opts)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *rbacv1.RoleBinding
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, types.PatchType, []byte, metav1.PatchOptions, ...string) (*rbacv1.RoleBinding, error)); ok {
		return rf(ctx, name, pt, data, opts, subresources...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, types.PatchType, []byte, metav1.PatchOptions, ...string) *rbacv1.RoleBinding); ok {
		r0 = rf(ctx, name, pt, data, opts, subresources...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rbacv1.RoleBinding)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, types.PatchType, []byte, metav1.PatchOptions, ...string) error); ok {
		r1 = rf(ctx, name, pt, data, opts, subresources...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RoleBindingInterface_Patch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Patch'
type RoleBindingInterface_Patch_Call struct {
	*mock.Call
}

// Patch is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - pt types.PatchType
//   - data []byte
//   - opts metav1.PatchOptions
//   - subresources ...string
func (_e *RoleBindingInterface_Expecter) Patch(ctx interface{}, name interface{}, pt interface{}, data interface{}, opts interface{}, subresources ...interface{}) *RoleBindingInterface_Patch_Call {
	return &RoleBindingInterface_Patch_Call{Call: _e.mock.On("Patch",
		append([]interface{}{ctx, name, pt, data, opts}, subresources...)...)}
}

func (_c *RoleBindingInterface_Patch_Call) Run(run func(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string)) *RoleBindingInterface_Patch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-5)
		for i, a := range args[5:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(types.PatchType), args[3].([]byte), args[4].(metav1.PatchOptions), variadicArgs...)
	})
	return _c
}

func (_c *RoleBindingInterface_Patch_Call) Return(result *rbacv1.RoleBinding, err error) *RoleBindingInterface_Patch_Call {
	_c.Call.Return(result, err)
	return _c
}

func (_c *RoleBindingInterface_Patch_Call) RunAndReturn(run func(context.Context, string, types.PatchType, []byte, metav1.PatchOptions, ...string) (*rbacv1.RoleBinding, error)) *RoleBindingInterface_Patch_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, roleBinding, opts
func (_m *RoleBindingInterface) Update(ctx context.Context, roleBinding *rbacv1.RoleBinding, opts metav1.UpdateOptions) (*rbacv1.RoleBinding, error) {
	ret := _m.Called(ctx, roleBinding, opts)

	var r0 *rbacv1.RoleBinding
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rbacv1.RoleBinding, metav1.UpdateOptions) (*rbacv1.RoleBinding, error)); ok {
		return rf(ctx, roleBinding, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rbacv1.RoleBinding, metav1.UpdateOptions) *rbacv1.RoleBinding); ok {
		r0 = rf(ctx, roleBinding, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rbacv1.RoleBinding)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rbacv1.RoleBinding, metav1.UpdateOptions) error); ok {
		r1 = rf(ctx, roleBinding, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RoleBindingInterface_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type RoleBindingInterface_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - roleBinding *rbacv1.RoleBinding
//   - opts metav1.UpdateOptions
func (_e *RoleBindingInterface_Expecter) Update(ctx interface{}, roleBinding interface{}, opts interface{}) *RoleBindingInterface_Update_Call {
	return &RoleBindingInterface_Update_Call{Call: _e.mock.On("Update", ctx, roleBinding, opts)}
}

func (_c *RoleBindingInterface_Update_Call) Run(run func(ctx context.Context, roleBinding *rbacv1.RoleBinding, opts metav1.UpdateOptions)) *RoleBindingInterface_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*rbacv1.RoleBinding), args[2].(metav1.UpdateOptions))
	})
	return _c
}

func (_c *RoleBindingInterface_Update_Call) Return(_a0 *rbacv1.RoleBinding, _a1 error) *RoleBindingInterface_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RoleBindingInterface_Update_Call) RunAndReturn(run func(context.Context, *rbacv1.RoleBinding, metav1.UpdateOptions) (*rbacv1.RoleBinding, error)) *RoleBindingInterface_Update_Call {
	_c.Call.Return(run)
	return _c
}

// Watch provides a mock function with given fields: ctx, opts
func (_m *RoleBindingInterface) Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error) {
	ret := _m.Called(ctx, opts)

	var r0 watch.Interface
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, metav1.ListOptions) (watch.Interface, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, metav1.ListOptions) watch.Interface); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(watch.Interface)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, metav1.ListOptions) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RoleBindingInterface_Watch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Watch'
type RoleBindingInterface_Watch_Call struct {
	*mock.Call
}

// Watch is a helper method to define mock.On call
//   - ctx context.Context
//   - opts metav1.ListOptions
func (_e *RoleBindingInterface_Expecter) Watch(ctx interface{}, opts interface{}) *RoleBindingInterface_Watch_Call {
	return &RoleBindingInterface_Watch_Call{Call: _e.mock.On("Watch", ctx, opts)}
}

func (_c *RoleBindingInterface_Watch_Call) Run(run func(ctx context.Context, opts metav1.ListOptions)) *RoleBindingInterface_Watch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(metav1.ListOptions))
	})
	return _c
}

func (_c *RoleBindingInterface_Watch_Call) Return(_a0 watch.Interface, _a1 error) *RoleBindingInterface_Watch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RoleBindingInterface_Watch_Call) RunAndReturn(run func(context.Context, metav1.ListOptions) (watch.Interface, error)) *RoleBindingInterface_Watch_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewRoleBindingInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewRoleBindingInterface creates a new instance of RoleBindingInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRoleBindingInterface(t mockConstructorTestingTNewRoleBindingInterface) *RoleBindingInterface {
	mock := &RoleBindingInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
