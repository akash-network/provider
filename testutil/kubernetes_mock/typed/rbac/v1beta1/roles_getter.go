// Code generated by mockery v2.23.1. DO NOT EDIT.

package kubernetes_mocks

import (
	mock "github.com/stretchr/testify/mock"
	v1beta1 "k8s.io/client-go/kubernetes/typed/rbac/v1beta1"
)

// RolesGetter is an autogenerated mock type for the RolesGetter type
type RolesGetter struct {
	mock.Mock
}

type RolesGetter_Expecter struct {
	mock *mock.Mock
}

func (_m *RolesGetter) EXPECT() *RolesGetter_Expecter {
	return &RolesGetter_Expecter{mock: &_m.Mock}
}

// Roles provides a mock function with given fields: namespace
func (_m *RolesGetter) Roles(namespace string) v1beta1.RoleInterface {
	ret := _m.Called(namespace)

	var r0 v1beta1.RoleInterface
	if rf, ok := ret.Get(0).(func(string) v1beta1.RoleInterface); ok {
		r0 = rf(namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1beta1.RoleInterface)
		}
	}

	return r0
}

// RolesGetter_Roles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Roles'
type RolesGetter_Roles_Call struct {
	*mock.Call
}

// Roles is a helper method to define mock.On call
//   - namespace string
func (_e *RolesGetter_Expecter) Roles(namespace interface{}) *RolesGetter_Roles_Call {
	return &RolesGetter_Roles_Call{Call: _e.mock.On("Roles", namespace)}
}

func (_c *RolesGetter_Roles_Call) Run(run func(namespace string)) *RolesGetter_Roles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *RolesGetter_Roles_Call) Return(_a0 v1beta1.RoleInterface) *RolesGetter_Roles_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RolesGetter_Roles_Call) RunAndReturn(run func(string) v1beta1.RoleInterface) *RolesGetter_Roles_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewRolesGetter interface {
	mock.TestingT
	Cleanup(func())
}

// NewRolesGetter creates a new instance of RolesGetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRolesGetter(t mockConstructorTestingTNewRolesGetter) *RolesGetter {
	mock := &RolesGetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
