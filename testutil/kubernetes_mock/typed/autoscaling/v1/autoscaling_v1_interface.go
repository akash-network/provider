// Code generated by mockery v2.23.1. DO NOT EDIT.

package kubernetes_mocks

import (
	mock "github.com/stretchr/testify/mock"
	rest "k8s.io/client-go/rest"

	v1 "k8s.io/client-go/kubernetes/typed/autoscaling/v1"
)

// AutoscalingV1Interface is an autogenerated mock type for the AutoscalingV1Interface type
type AutoscalingV1Interface struct {
	mock.Mock
}

type AutoscalingV1Interface_Expecter struct {
	mock *mock.Mock
}

func (_m *AutoscalingV1Interface) EXPECT() *AutoscalingV1Interface_Expecter {
	return &AutoscalingV1Interface_Expecter{mock: &_m.Mock}
}

// HorizontalPodAutoscalers provides a mock function with given fields: namespace
func (_m *AutoscalingV1Interface) HorizontalPodAutoscalers(namespace string) v1.HorizontalPodAutoscalerInterface {
	ret := _m.Called(namespace)

	var r0 v1.HorizontalPodAutoscalerInterface
	if rf, ok := ret.Get(0).(func(string) v1.HorizontalPodAutoscalerInterface); ok {
		r0 = rf(namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1.HorizontalPodAutoscalerInterface)
		}
	}

	return r0
}

// AutoscalingV1Interface_HorizontalPodAutoscalers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HorizontalPodAutoscalers'
type AutoscalingV1Interface_HorizontalPodAutoscalers_Call struct {
	*mock.Call
}

// HorizontalPodAutoscalers is a helper method to define mock.On call
//   - namespace string
func (_e *AutoscalingV1Interface_Expecter) HorizontalPodAutoscalers(namespace interface{}) *AutoscalingV1Interface_HorizontalPodAutoscalers_Call {
	return &AutoscalingV1Interface_HorizontalPodAutoscalers_Call{Call: _e.mock.On("HorizontalPodAutoscalers", namespace)}
}

func (_c *AutoscalingV1Interface_HorizontalPodAutoscalers_Call) Run(run func(namespace string)) *AutoscalingV1Interface_HorizontalPodAutoscalers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *AutoscalingV1Interface_HorizontalPodAutoscalers_Call) Return(_a0 v1.HorizontalPodAutoscalerInterface) *AutoscalingV1Interface_HorizontalPodAutoscalers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AutoscalingV1Interface_HorizontalPodAutoscalers_Call) RunAndReturn(run func(string) v1.HorizontalPodAutoscalerInterface) *AutoscalingV1Interface_HorizontalPodAutoscalers_Call {
	_c.Call.Return(run)
	return _c
}

// RESTClient provides a mock function with given fields:
func (_m *AutoscalingV1Interface) RESTClient() rest.Interface {
	ret := _m.Called()

	var r0 rest.Interface
	if rf, ok := ret.Get(0).(func() rest.Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(rest.Interface)
		}
	}

	return r0
}

// AutoscalingV1Interface_RESTClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RESTClient'
type AutoscalingV1Interface_RESTClient_Call struct {
	*mock.Call
}

// RESTClient is a helper method to define mock.On call
func (_e *AutoscalingV1Interface_Expecter) RESTClient() *AutoscalingV1Interface_RESTClient_Call {
	return &AutoscalingV1Interface_RESTClient_Call{Call: _e.mock.On("RESTClient")}
}

func (_c *AutoscalingV1Interface_RESTClient_Call) Run(run func()) *AutoscalingV1Interface_RESTClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AutoscalingV1Interface_RESTClient_Call) Return(_a0 rest.Interface) *AutoscalingV1Interface_RESTClient_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AutoscalingV1Interface_RESTClient_Call) RunAndReturn(run func() rest.Interface) *AutoscalingV1Interface_RESTClient_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewAutoscalingV1Interface interface {
	mock.TestingT
	Cleanup(func())
}

// NewAutoscalingV1Interface creates a new instance of AutoscalingV1Interface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAutoscalingV1Interface(t mockConstructorTestingTNewAutoscalingV1Interface) *AutoscalingV1Interface {
	mock := &AutoscalingV1Interface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
