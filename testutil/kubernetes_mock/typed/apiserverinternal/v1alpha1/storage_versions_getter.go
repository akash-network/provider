// Code generated by mockery v2.23.1. DO NOT EDIT.

package kubernetes_mocks

import (
	mock "github.com/stretchr/testify/mock"
	v1alpha1 "k8s.io/client-go/kubernetes/typed/apiserverinternal/v1alpha1"
)

// StorageVersionsGetter is an autogenerated mock type for the StorageVersionsGetter type
type StorageVersionsGetter struct {
	mock.Mock
}

type StorageVersionsGetter_Expecter struct {
	mock *mock.Mock
}

func (_m *StorageVersionsGetter) EXPECT() *StorageVersionsGetter_Expecter {
	return &StorageVersionsGetter_Expecter{mock: &_m.Mock}
}

// StorageVersions provides a mock function with given fields:
func (_m *StorageVersionsGetter) StorageVersions() v1alpha1.StorageVersionInterface {
	ret := _m.Called()

	var r0 v1alpha1.StorageVersionInterface
	if rf, ok := ret.Get(0).(func() v1alpha1.StorageVersionInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1alpha1.StorageVersionInterface)
		}
	}

	return r0
}

// StorageVersionsGetter_StorageVersions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StorageVersions'
type StorageVersionsGetter_StorageVersions_Call struct {
	*mock.Call
}

// StorageVersions is a helper method to define mock.On call
func (_e *StorageVersionsGetter_Expecter) StorageVersions() *StorageVersionsGetter_StorageVersions_Call {
	return &StorageVersionsGetter_StorageVersions_Call{Call: _e.mock.On("StorageVersions")}
}

func (_c *StorageVersionsGetter_StorageVersions_Call) Run(run func()) *StorageVersionsGetter_StorageVersions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *StorageVersionsGetter_StorageVersions_Call) Return(_a0 v1alpha1.StorageVersionInterface) *StorageVersionsGetter_StorageVersions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StorageVersionsGetter_StorageVersions_Call) RunAndReturn(run func() v1alpha1.StorageVersionInterface) *StorageVersionsGetter_StorageVersions_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewStorageVersionsGetter interface {
	mock.TestingT
	Cleanup(func())
}

// NewStorageVersionsGetter creates a new instance of StorageVersionsGetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewStorageVersionsGetter(t mockConstructorTestingTNewStorageVersionsGetter) *StorageVersionsGetter {
	mock := &StorageVersionsGetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
