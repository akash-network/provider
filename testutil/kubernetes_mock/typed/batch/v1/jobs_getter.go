// Code generated by mockery v2.23.1. DO NOT EDIT.

package kubernetes_mocks

import (
	mock "github.com/stretchr/testify/mock"
	v1 "k8s.io/client-go/kubernetes/typed/batch/v1"
)

// JobsGetter is an autogenerated mock type for the JobsGetter type
type JobsGetter struct {
	mock.Mock
}

type JobsGetter_Expecter struct {
	mock *mock.Mock
}

func (_m *JobsGetter) EXPECT() *JobsGetter_Expecter {
	return &JobsGetter_Expecter{mock: &_m.Mock}
}

// Jobs provides a mock function with given fields: namespace
func (_m *JobsGetter) Jobs(namespace string) v1.JobInterface {
	ret := _m.Called(namespace)

	var r0 v1.JobInterface
	if rf, ok := ret.Get(0).(func(string) v1.JobInterface); ok {
		r0 = rf(namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1.JobInterface)
		}
	}

	return r0
}

// JobsGetter_Jobs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Jobs'
type JobsGetter_Jobs_Call struct {
	*mock.Call
}

// Jobs is a helper method to define mock.On call
//   - namespace string
func (_e *JobsGetter_Expecter) Jobs(namespace interface{}) *JobsGetter_Jobs_Call {
	return &JobsGetter_Jobs_Call{Call: _e.mock.On("Jobs", namespace)}
}

func (_c *JobsGetter_Jobs_Call) Run(run func(namespace string)) *JobsGetter_Jobs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *JobsGetter_Jobs_Call) Return(_a0 v1.JobInterface) *JobsGetter_Jobs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *JobsGetter_Jobs_Call) RunAndReturn(run func(string) v1.JobInterface) *JobsGetter_Jobs_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewJobsGetter interface {
	mock.TestingT
	Cleanup(func())
}

// NewJobsGetter creates a new instance of JobsGetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewJobsGetter(t mockConstructorTestingTNewJobsGetter) *JobsGetter {
	mock := &JobsGetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
