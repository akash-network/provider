// Code generated by mockery v2.23.1. DO NOT EDIT.

package kubernetes_mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	v1beta1 "k8s.io/api/authorization/v1beta1"
)

// LocalSubjectAccessReviewInterface is an autogenerated mock type for the LocalSubjectAccessReviewInterface type
type LocalSubjectAccessReviewInterface struct {
	mock.Mock
}

type LocalSubjectAccessReviewInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *LocalSubjectAccessReviewInterface) EXPECT() *LocalSubjectAccessReviewInterface_Expecter {
	return &LocalSubjectAccessReviewInterface_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, localSubjectAccessReview, opts
func (_m *LocalSubjectAccessReviewInterface) Create(ctx context.Context, localSubjectAccessReview *v1beta1.LocalSubjectAccessReview, opts v1.CreateOptions) (*v1beta1.LocalSubjectAccessReview, error) {
	ret := _m.Called(ctx, localSubjectAccessReview, opts)

	var r0 *v1beta1.LocalSubjectAccessReview
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1beta1.LocalSubjectAccessReview, v1.CreateOptions) (*v1beta1.LocalSubjectAccessReview, error)); ok {
		return rf(ctx, localSubjectAccessReview, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1beta1.LocalSubjectAccessReview, v1.CreateOptions) *v1beta1.LocalSubjectAccessReview); ok {
		r0 = rf(ctx, localSubjectAccessReview, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1beta1.LocalSubjectAccessReview)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1beta1.LocalSubjectAccessReview, v1.CreateOptions) error); ok {
		r1 = rf(ctx, localSubjectAccessReview, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LocalSubjectAccessReviewInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type LocalSubjectAccessReviewInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - localSubjectAccessReview *v1beta1.LocalSubjectAccessReview
//   - opts v1.CreateOptions
func (_e *LocalSubjectAccessReviewInterface_Expecter) Create(ctx interface{}, localSubjectAccessReview interface{}, opts interface{}) *LocalSubjectAccessReviewInterface_Create_Call {
	return &LocalSubjectAccessReviewInterface_Create_Call{Call: _e.mock.On("Create", ctx, localSubjectAccessReview, opts)}
}

func (_c *LocalSubjectAccessReviewInterface_Create_Call) Run(run func(ctx context.Context, localSubjectAccessReview *v1beta1.LocalSubjectAccessReview, opts v1.CreateOptions)) *LocalSubjectAccessReviewInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1beta1.LocalSubjectAccessReview), args[2].(v1.CreateOptions))
	})
	return _c
}

func (_c *LocalSubjectAccessReviewInterface_Create_Call) Return(_a0 *v1beta1.LocalSubjectAccessReview, _a1 error) *LocalSubjectAccessReviewInterface_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LocalSubjectAccessReviewInterface_Create_Call) RunAndReturn(run func(context.Context, *v1beta1.LocalSubjectAccessReview, v1.CreateOptions) (*v1beta1.LocalSubjectAccessReview, error)) *LocalSubjectAccessReviewInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewLocalSubjectAccessReviewInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewLocalSubjectAccessReviewInterface creates a new instance of LocalSubjectAccessReviewInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewLocalSubjectAccessReviewInterface(t mockConstructorTestingTNewLocalSubjectAccessReviewInterface) *LocalSubjectAccessReviewInterface {
	mock := &LocalSubjectAccessReviewInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
