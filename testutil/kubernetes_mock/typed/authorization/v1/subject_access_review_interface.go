// Code generated by mockery v2.23.1. DO NOT EDIT.

package kubernetes_mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	v1 "k8s.io/api/authorization/v1"
)

// SubjectAccessReviewInterface is an autogenerated mock type for the SubjectAccessReviewInterface type
type SubjectAccessReviewInterface struct {
	mock.Mock
}

type SubjectAccessReviewInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *SubjectAccessReviewInterface) EXPECT() *SubjectAccessReviewInterface_Expecter {
	return &SubjectAccessReviewInterface_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, subjectAccessReview, opts
func (_m *SubjectAccessReviewInterface) Create(ctx context.Context, subjectAccessReview *v1.SubjectAccessReview, opts metav1.CreateOptions) (*v1.SubjectAccessReview, error) {
	ret := _m.Called(ctx, subjectAccessReview, opts)

	var r0 *v1.SubjectAccessReview
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.SubjectAccessReview, metav1.CreateOptions) (*v1.SubjectAccessReview, error)); ok {
		return rf(ctx, subjectAccessReview, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.SubjectAccessReview, metav1.CreateOptions) *v1.SubjectAccessReview); ok {
		r0 = rf(ctx, subjectAccessReview, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.SubjectAccessReview)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.SubjectAccessReview, metav1.CreateOptions) error); ok {
		r1 = rf(ctx, subjectAccessReview, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubjectAccessReviewInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type SubjectAccessReviewInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - subjectAccessReview *v1.SubjectAccessReview
//   - opts metav1.CreateOptions
func (_e *SubjectAccessReviewInterface_Expecter) Create(ctx interface{}, subjectAccessReview interface{}, opts interface{}) *SubjectAccessReviewInterface_Create_Call {
	return &SubjectAccessReviewInterface_Create_Call{Call: _e.mock.On("Create", ctx, subjectAccessReview, opts)}
}

func (_c *SubjectAccessReviewInterface_Create_Call) Run(run func(ctx context.Context, subjectAccessReview *v1.SubjectAccessReview, opts metav1.CreateOptions)) *SubjectAccessReviewInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1.SubjectAccessReview), args[2].(metav1.CreateOptions))
	})
	return _c
}

func (_c *SubjectAccessReviewInterface_Create_Call) Return(_a0 *v1.SubjectAccessReview, _a1 error) *SubjectAccessReviewInterface_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SubjectAccessReviewInterface_Create_Call) RunAndReturn(run func(context.Context, *v1.SubjectAccessReview, metav1.CreateOptions) (*v1.SubjectAccessReview, error)) *SubjectAccessReviewInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewSubjectAccessReviewInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewSubjectAccessReviewInterface creates a new instance of SubjectAccessReviewInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSubjectAccessReviewInterface(t mockConstructorTestingTNewSubjectAccessReviewInterface) *SubjectAccessReviewInterface {
	mock := &SubjectAccessReviewInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
