// Code generated by mockery v2.23.1. DO NOT EDIT.

package kubernetes_mocks

import (
	context "context"

	autoscalingv1 "k8s.io/api/autoscaling/v1"

	corev1 "k8s.io/api/core/v1"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	mock "github.com/stretchr/testify/mock"

	types "k8s.io/apimachinery/pkg/types"

	v1 "k8s.io/client-go/applyconfigurations/core/v1"

	watch "k8s.io/apimachinery/pkg/watch"
)

// ReplicationControllerInterface is an autogenerated mock type for the ReplicationControllerInterface type
type ReplicationControllerInterface struct {
	mock.Mock
}

type ReplicationControllerInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *ReplicationControllerInterface) EXPECT() *ReplicationControllerInterface_Expecter {
	return &ReplicationControllerInterface_Expecter{mock: &_m.Mock}
}

// Apply provides a mock function with given fields: ctx, replicationController, opts
func (_m *ReplicationControllerInterface) Apply(ctx context.Context, replicationController *v1.ReplicationControllerApplyConfiguration, opts metav1.ApplyOptions) (*corev1.ReplicationController, error) {
	ret := _m.Called(ctx, replicationController, opts)

	var r0 *corev1.ReplicationController
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.ReplicationControllerApplyConfiguration, metav1.ApplyOptions) (*corev1.ReplicationController, error)); ok {
		return rf(ctx, replicationController, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.ReplicationControllerApplyConfiguration, metav1.ApplyOptions) *corev1.ReplicationController); ok {
		r0 = rf(ctx, replicationController, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*corev1.ReplicationController)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.ReplicationControllerApplyConfiguration, metav1.ApplyOptions) error); ok {
		r1 = rf(ctx, replicationController, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReplicationControllerInterface_Apply_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Apply'
type ReplicationControllerInterface_Apply_Call struct {
	*mock.Call
}

// Apply is a helper method to define mock.On call
//   - ctx context.Context
//   - replicationController *v1.ReplicationControllerApplyConfiguration
//   - opts metav1.ApplyOptions
func (_e *ReplicationControllerInterface_Expecter) Apply(ctx interface{}, replicationController interface{}, opts interface{}) *ReplicationControllerInterface_Apply_Call {
	return &ReplicationControllerInterface_Apply_Call{Call: _e.mock.On("Apply", ctx, replicationController, opts)}
}

func (_c *ReplicationControllerInterface_Apply_Call) Run(run func(ctx context.Context, replicationController *v1.ReplicationControllerApplyConfiguration, opts metav1.ApplyOptions)) *ReplicationControllerInterface_Apply_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1.ReplicationControllerApplyConfiguration), args[2].(metav1.ApplyOptions))
	})
	return _c
}

func (_c *ReplicationControllerInterface_Apply_Call) Return(result *corev1.ReplicationController, err error) *ReplicationControllerInterface_Apply_Call {
	_c.Call.Return(result, err)
	return _c
}

func (_c *ReplicationControllerInterface_Apply_Call) RunAndReturn(run func(context.Context, *v1.ReplicationControllerApplyConfiguration, metav1.ApplyOptions) (*corev1.ReplicationController, error)) *ReplicationControllerInterface_Apply_Call {
	_c.Call.Return(run)
	return _c
}

// ApplyStatus provides a mock function with given fields: ctx, replicationController, opts
func (_m *ReplicationControllerInterface) ApplyStatus(ctx context.Context, replicationController *v1.ReplicationControllerApplyConfiguration, opts metav1.ApplyOptions) (*corev1.ReplicationController, error) {
	ret := _m.Called(ctx, replicationController, opts)

	var r0 *corev1.ReplicationController
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.ReplicationControllerApplyConfiguration, metav1.ApplyOptions) (*corev1.ReplicationController, error)); ok {
		return rf(ctx, replicationController, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.ReplicationControllerApplyConfiguration, metav1.ApplyOptions) *corev1.ReplicationController); ok {
		r0 = rf(ctx, replicationController, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*corev1.ReplicationController)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.ReplicationControllerApplyConfiguration, metav1.ApplyOptions) error); ok {
		r1 = rf(ctx, replicationController, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReplicationControllerInterface_ApplyStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ApplyStatus'
type ReplicationControllerInterface_ApplyStatus_Call struct {
	*mock.Call
}

// ApplyStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - replicationController *v1.ReplicationControllerApplyConfiguration
//   - opts metav1.ApplyOptions
func (_e *ReplicationControllerInterface_Expecter) ApplyStatus(ctx interface{}, replicationController interface{}, opts interface{}) *ReplicationControllerInterface_ApplyStatus_Call {
	return &ReplicationControllerInterface_ApplyStatus_Call{Call: _e.mock.On("ApplyStatus", ctx, replicationController, opts)}
}

func (_c *ReplicationControllerInterface_ApplyStatus_Call) Run(run func(ctx context.Context, replicationController *v1.ReplicationControllerApplyConfiguration, opts metav1.ApplyOptions)) *ReplicationControllerInterface_ApplyStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1.ReplicationControllerApplyConfiguration), args[2].(metav1.ApplyOptions))
	})
	return _c
}

func (_c *ReplicationControllerInterface_ApplyStatus_Call) Return(result *corev1.ReplicationController, err error) *ReplicationControllerInterface_ApplyStatus_Call {
	_c.Call.Return(result, err)
	return _c
}

func (_c *ReplicationControllerInterface_ApplyStatus_Call) RunAndReturn(run func(context.Context, *v1.ReplicationControllerApplyConfiguration, metav1.ApplyOptions) (*corev1.ReplicationController, error)) *ReplicationControllerInterface_ApplyStatus_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, replicationController, opts
func (_m *ReplicationControllerInterface) Create(ctx context.Context, replicationController *corev1.ReplicationController, opts metav1.CreateOptions) (*corev1.ReplicationController, error) {
	ret := _m.Called(ctx, replicationController, opts)

	var r0 *corev1.ReplicationController
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *corev1.ReplicationController, metav1.CreateOptions) (*corev1.ReplicationController, error)); ok {
		return rf(ctx, replicationController, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *corev1.ReplicationController, metav1.CreateOptions) *corev1.ReplicationController); ok {
		r0 = rf(ctx, replicationController, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*corev1.ReplicationController)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *corev1.ReplicationController, metav1.CreateOptions) error); ok {
		r1 = rf(ctx, replicationController, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReplicationControllerInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type ReplicationControllerInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - replicationController *corev1.ReplicationController
//   - opts metav1.CreateOptions
func (_e *ReplicationControllerInterface_Expecter) Create(ctx interface{}, replicationController interface{}, opts interface{}) *ReplicationControllerInterface_Create_Call {
	return &ReplicationControllerInterface_Create_Call{Call: _e.mock.On("Create", ctx, replicationController, opts)}
}

func (_c *ReplicationControllerInterface_Create_Call) Run(run func(ctx context.Context, replicationController *corev1.ReplicationController, opts metav1.CreateOptions)) *ReplicationControllerInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*corev1.ReplicationController), args[2].(metav1.CreateOptions))
	})
	return _c
}

func (_c *ReplicationControllerInterface_Create_Call) Return(_a0 *corev1.ReplicationController, _a1 error) *ReplicationControllerInterface_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReplicationControllerInterface_Create_Call) RunAndReturn(run func(context.Context, *corev1.ReplicationController, metav1.CreateOptions) (*corev1.ReplicationController, error)) *ReplicationControllerInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, name, opts
func (_m *ReplicationControllerInterface) Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error {
	ret := _m.Called(ctx, name, opts)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, metav1.DeleteOptions) error); ok {
		r0 = rf(ctx, name, opts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReplicationControllerInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type ReplicationControllerInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - opts metav1.DeleteOptions
func (_e *ReplicationControllerInterface_Expecter) Delete(ctx interface{}, name interface{}, opts interface{}) *ReplicationControllerInterface_Delete_Call {
	return &ReplicationControllerInterface_Delete_Call{Call: _e.mock.On("Delete", ctx, name, opts)}
}

func (_c *ReplicationControllerInterface_Delete_Call) Run(run func(ctx context.Context, name string, opts metav1.DeleteOptions)) *ReplicationControllerInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(metav1.DeleteOptions))
	})
	return _c
}

func (_c *ReplicationControllerInterface_Delete_Call) Return(_a0 error) *ReplicationControllerInterface_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ReplicationControllerInterface_Delete_Call) RunAndReturn(run func(context.Context, string, metav1.DeleteOptions) error) *ReplicationControllerInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCollection provides a mock function with given fields: ctx, opts, listOpts
func (_m *ReplicationControllerInterface) DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error {
	ret := _m.Called(ctx, opts, listOpts)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, metav1.DeleteOptions, metav1.ListOptions) error); ok {
		r0 = rf(ctx, opts, listOpts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReplicationControllerInterface_DeleteCollection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCollection'
type ReplicationControllerInterface_DeleteCollection_Call struct {
	*mock.Call
}

// DeleteCollection is a helper method to define mock.On call
//   - ctx context.Context
//   - opts metav1.DeleteOptions
//   - listOpts metav1.ListOptions
func (_e *ReplicationControllerInterface_Expecter) DeleteCollection(ctx interface{}, opts interface{}, listOpts interface{}) *ReplicationControllerInterface_DeleteCollection_Call {
	return &ReplicationControllerInterface_DeleteCollection_Call{Call: _e.mock.On("DeleteCollection", ctx, opts, listOpts)}
}

func (_c *ReplicationControllerInterface_DeleteCollection_Call) Run(run func(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions)) *ReplicationControllerInterface_DeleteCollection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(metav1.DeleteOptions), args[2].(metav1.ListOptions))
	})
	return _c
}

func (_c *ReplicationControllerInterface_DeleteCollection_Call) Return(_a0 error) *ReplicationControllerInterface_DeleteCollection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ReplicationControllerInterface_DeleteCollection_Call) RunAndReturn(run func(context.Context, metav1.DeleteOptions, metav1.ListOptions) error) *ReplicationControllerInterface_DeleteCollection_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, name, opts
func (_m *ReplicationControllerInterface) Get(ctx context.Context, name string, opts metav1.GetOptions) (*corev1.ReplicationController, error) {
	ret := _m.Called(ctx, name, opts)

	var r0 *corev1.ReplicationController
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, metav1.GetOptions) (*corev1.ReplicationController, error)); ok {
		return rf(ctx, name, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, metav1.GetOptions) *corev1.ReplicationController); ok {
		r0 = rf(ctx, name, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*corev1.ReplicationController)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, metav1.GetOptions) error); ok {
		r1 = rf(ctx, name, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReplicationControllerInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type ReplicationControllerInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - opts metav1.GetOptions
func (_e *ReplicationControllerInterface_Expecter) Get(ctx interface{}, name interface{}, opts interface{}) *ReplicationControllerInterface_Get_Call {
	return &ReplicationControllerInterface_Get_Call{Call: _e.mock.On("Get", ctx, name, opts)}
}

func (_c *ReplicationControllerInterface_Get_Call) Run(run func(ctx context.Context, name string, opts metav1.GetOptions)) *ReplicationControllerInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(metav1.GetOptions))
	})
	return _c
}

func (_c *ReplicationControllerInterface_Get_Call) Return(_a0 *corev1.ReplicationController, _a1 error) *ReplicationControllerInterface_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReplicationControllerInterface_Get_Call) RunAndReturn(run func(context.Context, string, metav1.GetOptions) (*corev1.ReplicationController, error)) *ReplicationControllerInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetScale provides a mock function with given fields: ctx, replicationControllerName, options
func (_m *ReplicationControllerInterface) GetScale(ctx context.Context, replicationControllerName string, options metav1.GetOptions) (*autoscalingv1.Scale, error) {
	ret := _m.Called(ctx, replicationControllerName, options)

	var r0 *autoscalingv1.Scale
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, metav1.GetOptions) (*autoscalingv1.Scale, error)); ok {
		return rf(ctx, replicationControllerName, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, metav1.GetOptions) *autoscalingv1.Scale); ok {
		r0 = rf(ctx, replicationControllerName, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*autoscalingv1.Scale)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, metav1.GetOptions) error); ok {
		r1 = rf(ctx, replicationControllerName, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReplicationControllerInterface_GetScale_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetScale'
type ReplicationControllerInterface_GetScale_Call struct {
	*mock.Call
}

// GetScale is a helper method to define mock.On call
//   - ctx context.Context
//   - replicationControllerName string
//   - options metav1.GetOptions
func (_e *ReplicationControllerInterface_Expecter) GetScale(ctx interface{}, replicationControllerName interface{}, options interface{}) *ReplicationControllerInterface_GetScale_Call {
	return &ReplicationControllerInterface_GetScale_Call{Call: _e.mock.On("GetScale", ctx, replicationControllerName, options)}
}

func (_c *ReplicationControllerInterface_GetScale_Call) Run(run func(ctx context.Context, replicationControllerName string, options metav1.GetOptions)) *ReplicationControllerInterface_GetScale_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(metav1.GetOptions))
	})
	return _c
}

func (_c *ReplicationControllerInterface_GetScale_Call) Return(_a0 *autoscalingv1.Scale, _a1 error) *ReplicationControllerInterface_GetScale_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReplicationControllerInterface_GetScale_Call) RunAndReturn(run func(context.Context, string, metav1.GetOptions) (*autoscalingv1.Scale, error)) *ReplicationControllerInterface_GetScale_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, opts
func (_m *ReplicationControllerInterface) List(ctx context.Context, opts metav1.ListOptions) (*corev1.ReplicationControllerList, error) {
	ret := _m.Called(ctx, opts)

	var r0 *corev1.ReplicationControllerList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, metav1.ListOptions) (*corev1.ReplicationControllerList, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, metav1.ListOptions) *corev1.ReplicationControllerList); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*corev1.ReplicationControllerList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, metav1.ListOptions) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReplicationControllerInterface_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type ReplicationControllerInterface_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - opts metav1.ListOptions
func (_e *ReplicationControllerInterface_Expecter) List(ctx interface{}, opts interface{}) *ReplicationControllerInterface_List_Call {
	return &ReplicationControllerInterface_List_Call{Call: _e.mock.On("List", ctx, opts)}
}

func (_c *ReplicationControllerInterface_List_Call) Run(run func(ctx context.Context, opts metav1.ListOptions)) *ReplicationControllerInterface_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(metav1.ListOptions))
	})
	return _c
}

func (_c *ReplicationControllerInterface_List_Call) Return(_a0 *corev1.ReplicationControllerList, _a1 error) *ReplicationControllerInterface_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReplicationControllerInterface_List_Call) RunAndReturn(run func(context.Context, metav1.ListOptions) (*corev1.ReplicationControllerList, error)) *ReplicationControllerInterface_List_Call {
	_c.Call.Return(run)
	return _c
}

// Patch provides a mock function with given fields: ctx, name, pt, data, opts, subresources
func (_m *ReplicationControllerInterface) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (*corev1.ReplicationController, error) {
	_va := make([]interface{}, len(subresources))
	for _i := range subresources {
		_va[_i] = subresources[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, name, pt, data, opts)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *corev1.ReplicationController
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, types.PatchType, []byte, metav1.PatchOptions, ...string) (*corev1.ReplicationController, error)); ok {
		return rf(ctx, name, pt, data, opts, subresources...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, types.PatchType, []byte, metav1.PatchOptions, ...string) *corev1.ReplicationController); ok {
		r0 = rf(ctx, name, pt, data, opts, subresources...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*corev1.ReplicationController)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, types.PatchType, []byte, metav1.PatchOptions, ...string) error); ok {
		r1 = rf(ctx, name, pt, data, opts, subresources...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReplicationControllerInterface_Patch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Patch'
type ReplicationControllerInterface_Patch_Call struct {
	*mock.Call
}

// Patch is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - pt types.PatchType
//   - data []byte
//   - opts metav1.PatchOptions
//   - subresources ...string
func (_e *ReplicationControllerInterface_Expecter) Patch(ctx interface{}, name interface{}, pt interface{}, data interface{}, opts interface{}, subresources ...interface{}) *ReplicationControllerInterface_Patch_Call {
	return &ReplicationControllerInterface_Patch_Call{Call: _e.mock.On("Patch",
		append([]interface{}{ctx, name, pt, data, opts}, subresources...)...)}
}

func (_c *ReplicationControllerInterface_Patch_Call) Run(run func(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string)) *ReplicationControllerInterface_Patch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-5)
		for i, a := range args[5:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(types.PatchType), args[3].([]byte), args[4].(metav1.PatchOptions), variadicArgs...)
	})
	return _c
}

func (_c *ReplicationControllerInterface_Patch_Call) Return(result *corev1.ReplicationController, err error) *ReplicationControllerInterface_Patch_Call {
	_c.Call.Return(result, err)
	return _c
}

func (_c *ReplicationControllerInterface_Patch_Call) RunAndReturn(run func(context.Context, string, types.PatchType, []byte, metav1.PatchOptions, ...string) (*corev1.ReplicationController, error)) *ReplicationControllerInterface_Patch_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, replicationController, opts
func (_m *ReplicationControllerInterface) Update(ctx context.Context, replicationController *corev1.ReplicationController, opts metav1.UpdateOptions) (*corev1.ReplicationController, error) {
	ret := _m.Called(ctx, replicationController, opts)

	var r0 *corev1.ReplicationController
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *corev1.ReplicationController, metav1.UpdateOptions) (*corev1.ReplicationController, error)); ok {
		return rf(ctx, replicationController, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *corev1.ReplicationController, metav1.UpdateOptions) *corev1.ReplicationController); ok {
		r0 = rf(ctx, replicationController, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*corev1.ReplicationController)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *corev1.ReplicationController, metav1.UpdateOptions) error); ok {
		r1 = rf(ctx, replicationController, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReplicationControllerInterface_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type ReplicationControllerInterface_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - replicationController *corev1.ReplicationController
//   - opts metav1.UpdateOptions
func (_e *ReplicationControllerInterface_Expecter) Update(ctx interface{}, replicationController interface{}, opts interface{}) *ReplicationControllerInterface_Update_Call {
	return &ReplicationControllerInterface_Update_Call{Call: _e.mock.On("Update", ctx, replicationController, opts)}
}

func (_c *ReplicationControllerInterface_Update_Call) Run(run func(ctx context.Context, replicationController *corev1.ReplicationController, opts metav1.UpdateOptions)) *ReplicationControllerInterface_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*corev1.ReplicationController), args[2].(metav1.UpdateOptions))
	})
	return _c
}

func (_c *ReplicationControllerInterface_Update_Call) Return(_a0 *corev1.ReplicationController, _a1 error) *ReplicationControllerInterface_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReplicationControllerInterface_Update_Call) RunAndReturn(run func(context.Context, *corev1.ReplicationController, metav1.UpdateOptions) (*corev1.ReplicationController, error)) *ReplicationControllerInterface_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateScale provides a mock function with given fields: ctx, replicationControllerName, scale, opts
func (_m *ReplicationControllerInterface) UpdateScale(ctx context.Context, replicationControllerName string, scale *autoscalingv1.Scale, opts metav1.UpdateOptions) (*autoscalingv1.Scale, error) {
	ret := _m.Called(ctx, replicationControllerName, scale, opts)

	var r0 *autoscalingv1.Scale
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *autoscalingv1.Scale, metav1.UpdateOptions) (*autoscalingv1.Scale, error)); ok {
		return rf(ctx, replicationControllerName, scale, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *autoscalingv1.Scale, metav1.UpdateOptions) *autoscalingv1.Scale); ok {
		r0 = rf(ctx, replicationControllerName, scale, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*autoscalingv1.Scale)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *autoscalingv1.Scale, metav1.UpdateOptions) error); ok {
		r1 = rf(ctx, replicationControllerName, scale, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReplicationControllerInterface_UpdateScale_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateScale'
type ReplicationControllerInterface_UpdateScale_Call struct {
	*mock.Call
}

// UpdateScale is a helper method to define mock.On call
//   - ctx context.Context
//   - replicationControllerName string
//   - scale *autoscalingv1.Scale
//   - opts metav1.UpdateOptions
func (_e *ReplicationControllerInterface_Expecter) UpdateScale(ctx interface{}, replicationControllerName interface{}, scale interface{}, opts interface{}) *ReplicationControllerInterface_UpdateScale_Call {
	return &ReplicationControllerInterface_UpdateScale_Call{Call: _e.mock.On("UpdateScale", ctx, replicationControllerName, scale, opts)}
}

func (_c *ReplicationControllerInterface_UpdateScale_Call) Run(run func(ctx context.Context, replicationControllerName string, scale *autoscalingv1.Scale, opts metav1.UpdateOptions)) *ReplicationControllerInterface_UpdateScale_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*autoscalingv1.Scale), args[3].(metav1.UpdateOptions))
	})
	return _c
}

func (_c *ReplicationControllerInterface_UpdateScale_Call) Return(_a0 *autoscalingv1.Scale, _a1 error) *ReplicationControllerInterface_UpdateScale_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReplicationControllerInterface_UpdateScale_Call) RunAndReturn(run func(context.Context, string, *autoscalingv1.Scale, metav1.UpdateOptions) (*autoscalingv1.Scale, error)) *ReplicationControllerInterface_UpdateScale_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStatus provides a mock function with given fields: ctx, replicationController, opts
func (_m *ReplicationControllerInterface) UpdateStatus(ctx context.Context, replicationController *corev1.ReplicationController, opts metav1.UpdateOptions) (*corev1.ReplicationController, error) {
	ret := _m.Called(ctx, replicationController, opts)

	var r0 *corev1.ReplicationController
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *corev1.ReplicationController, metav1.UpdateOptions) (*corev1.ReplicationController, error)); ok {
		return rf(ctx, replicationController, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *corev1.ReplicationController, metav1.UpdateOptions) *corev1.ReplicationController); ok {
		r0 = rf(ctx, replicationController, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*corev1.ReplicationController)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *corev1.ReplicationController, metav1.UpdateOptions) error); ok {
		r1 = rf(ctx, replicationController, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReplicationControllerInterface_UpdateStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStatus'
type ReplicationControllerInterface_UpdateStatus_Call struct {
	*mock.Call
}

// UpdateStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - replicationController *corev1.ReplicationController
//   - opts metav1.UpdateOptions
func (_e *ReplicationControllerInterface_Expecter) UpdateStatus(ctx interface{}, replicationController interface{}, opts interface{}) *ReplicationControllerInterface_UpdateStatus_Call {
	return &ReplicationControllerInterface_UpdateStatus_Call{Call: _e.mock.On("UpdateStatus", ctx, replicationController, opts)}
}

func (_c *ReplicationControllerInterface_UpdateStatus_Call) Run(run func(ctx context.Context, replicationController *corev1.ReplicationController, opts metav1.UpdateOptions)) *ReplicationControllerInterface_UpdateStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*corev1.ReplicationController), args[2].(metav1.UpdateOptions))
	})
	return _c
}

func (_c *ReplicationControllerInterface_UpdateStatus_Call) Return(_a0 *corev1.ReplicationController, _a1 error) *ReplicationControllerInterface_UpdateStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReplicationControllerInterface_UpdateStatus_Call) RunAndReturn(run func(context.Context, *corev1.ReplicationController, metav1.UpdateOptions) (*corev1.ReplicationController, error)) *ReplicationControllerInterface_UpdateStatus_Call {
	_c.Call.Return(run)
	return _c
}

// Watch provides a mock function with given fields: ctx, opts
func (_m *ReplicationControllerInterface) Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error) {
	ret := _m.Called(ctx, opts)

	var r0 watch.Interface
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, metav1.ListOptions) (watch.Interface, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, metav1.ListOptions) watch.Interface); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(watch.Interface)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, metav1.ListOptions) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReplicationControllerInterface_Watch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Watch'
type ReplicationControllerInterface_Watch_Call struct {
	*mock.Call
}

// Watch is a helper method to define mock.On call
//   - ctx context.Context
//   - opts metav1.ListOptions
func (_e *ReplicationControllerInterface_Expecter) Watch(ctx interface{}, opts interface{}) *ReplicationControllerInterface_Watch_Call {
	return &ReplicationControllerInterface_Watch_Call{Call: _e.mock.On("Watch", ctx, opts)}
}

func (_c *ReplicationControllerInterface_Watch_Call) Run(run func(ctx context.Context, opts metav1.ListOptions)) *ReplicationControllerInterface_Watch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(metav1.ListOptions))
	})
	return _c
}

func (_c *ReplicationControllerInterface_Watch_Call) Return(_a0 watch.Interface, _a1 error) *ReplicationControllerInterface_Watch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReplicationControllerInterface_Watch_Call) RunAndReturn(run func(context.Context, metav1.ListOptions) (watch.Interface, error)) *ReplicationControllerInterface_Watch_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewReplicationControllerInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewReplicationControllerInterface creates a new instance of ReplicationControllerInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewReplicationControllerInterface(t mockConstructorTestingTNewReplicationControllerInterface) *ReplicationControllerInterface {
	mock := &ReplicationControllerInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
