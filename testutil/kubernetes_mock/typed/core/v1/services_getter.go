// Code generated by mockery v2.23.1. DO NOT EDIT.

package kubernetes_mocks

import (
	mock "github.com/stretchr/testify/mock"
	v1 "k8s.io/client-go/kubernetes/typed/core/v1"
)

// ServicesGetter is an autogenerated mock type for the ServicesGetter type
type ServicesGetter struct {
	mock.Mock
}

type ServicesGetter_Expecter struct {
	mock *mock.Mock
}

func (_m *ServicesGetter) EXPECT() *ServicesGetter_Expecter {
	return &ServicesGetter_Expecter{mock: &_m.Mock}
}

// Services provides a mock function with given fields: namespace
func (_m *ServicesGetter) Services(namespace string) v1.ServiceInterface {
	ret := _m.Called(namespace)

	var r0 v1.ServiceInterface
	if rf, ok := ret.Get(0).(func(string) v1.ServiceInterface); ok {
		r0 = rf(namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1.ServiceInterface)
		}
	}

	return r0
}

// ServicesGetter_Services_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Services'
type ServicesGetter_Services_Call struct {
	*mock.Call
}

// Services is a helper method to define mock.On call
//   - namespace string
func (_e *ServicesGetter_Expecter) Services(namespace interface{}) *ServicesGetter_Services_Call {
	return &ServicesGetter_Services_Call{Call: _e.mock.On("Services", namespace)}
}

func (_c *ServicesGetter_Services_Call) Run(run func(namespace string)) *ServicesGetter_Services_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ServicesGetter_Services_Call) Return(_a0 v1.ServiceInterface) *ServicesGetter_Services_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServicesGetter_Services_Call) RunAndReturn(run func(string) v1.ServiceInterface) *ServicesGetter_Services_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewServicesGetter interface {
	mock.TestingT
	Cleanup(func())
}

// NewServicesGetter creates a new instance of ServicesGetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewServicesGetter(t mockConstructorTestingTNewServicesGetter) *ServicesGetter {
	mock := &ServicesGetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
