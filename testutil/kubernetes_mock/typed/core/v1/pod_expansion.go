// Code generated by mockery v2.23.1. DO NOT EDIT.

package kubernetes_mocks

import (
	context "context"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	mock "github.com/stretchr/testify/mock"

	policyv1 "k8s.io/api/policy/v1"

	rest "k8s.io/client-go/rest"

	v1 "k8s.io/api/core/v1"

	v1beta1 "k8s.io/api/policy/v1beta1"
)

// PodExpansion is an autogenerated mock type for the PodExpansion type
type PodExpansion struct {
	mock.Mock
}

type PodExpansion_Expecter struct {
	mock *mock.Mock
}

func (_m *PodExpansion) EXPECT() *PodExpansion_Expecter {
	return &PodExpansion_Expecter{mock: &_m.Mock}
}

// Bind provides a mock function with given fields: ctx, binding, opts
func (_m *PodExpansion) Bind(ctx context.Context, binding *v1.Binding, opts metav1.CreateOptions) error {
	ret := _m.Called(ctx, binding, opts)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.Binding, metav1.CreateOptions) error); ok {
		r0 = rf(ctx, binding, opts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PodExpansion_Bind_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Bind'
type PodExpansion_Bind_Call struct {
	*mock.Call
}

// Bind is a helper method to define mock.On call
//   - ctx context.Context
//   - binding *v1.Binding
//   - opts metav1.CreateOptions
func (_e *PodExpansion_Expecter) Bind(ctx interface{}, binding interface{}, opts interface{}) *PodExpansion_Bind_Call {
	return &PodExpansion_Bind_Call{Call: _e.mock.On("Bind", ctx, binding, opts)}
}

func (_c *PodExpansion_Bind_Call) Run(run func(ctx context.Context, binding *v1.Binding, opts metav1.CreateOptions)) *PodExpansion_Bind_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1.Binding), args[2].(metav1.CreateOptions))
	})
	return _c
}

func (_c *PodExpansion_Bind_Call) Return(_a0 error) *PodExpansion_Bind_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PodExpansion_Bind_Call) RunAndReturn(run func(context.Context, *v1.Binding, metav1.CreateOptions) error) *PodExpansion_Bind_Call {
	_c.Call.Return(run)
	return _c
}

// Evict provides a mock function with given fields: ctx, eviction
func (_m *PodExpansion) Evict(ctx context.Context, eviction *v1beta1.Eviction) error {
	ret := _m.Called(ctx, eviction)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1beta1.Eviction) error); ok {
		r0 = rf(ctx, eviction)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PodExpansion_Evict_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Evict'
type PodExpansion_Evict_Call struct {
	*mock.Call
}

// Evict is a helper method to define mock.On call
//   - ctx context.Context
//   - eviction *v1beta1.Eviction
func (_e *PodExpansion_Expecter) Evict(ctx interface{}, eviction interface{}) *PodExpansion_Evict_Call {
	return &PodExpansion_Evict_Call{Call: _e.mock.On("Evict", ctx, eviction)}
}

func (_c *PodExpansion_Evict_Call) Run(run func(ctx context.Context, eviction *v1beta1.Eviction)) *PodExpansion_Evict_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1beta1.Eviction))
	})
	return _c
}

func (_c *PodExpansion_Evict_Call) Return(_a0 error) *PodExpansion_Evict_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PodExpansion_Evict_Call) RunAndReturn(run func(context.Context, *v1beta1.Eviction) error) *PodExpansion_Evict_Call {
	_c.Call.Return(run)
	return _c
}

// EvictV1 provides a mock function with given fields: ctx, eviction
func (_m *PodExpansion) EvictV1(ctx context.Context, eviction *policyv1.Eviction) error {
	ret := _m.Called(ctx, eviction)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *policyv1.Eviction) error); ok {
		r0 = rf(ctx, eviction)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PodExpansion_EvictV1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EvictV1'
type PodExpansion_EvictV1_Call struct {
	*mock.Call
}

// EvictV1 is a helper method to define mock.On call
//   - ctx context.Context
//   - eviction *policyv1.Eviction
func (_e *PodExpansion_Expecter) EvictV1(ctx interface{}, eviction interface{}) *PodExpansion_EvictV1_Call {
	return &PodExpansion_EvictV1_Call{Call: _e.mock.On("EvictV1", ctx, eviction)}
}

func (_c *PodExpansion_EvictV1_Call) Run(run func(ctx context.Context, eviction *policyv1.Eviction)) *PodExpansion_EvictV1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*policyv1.Eviction))
	})
	return _c
}

func (_c *PodExpansion_EvictV1_Call) Return(_a0 error) *PodExpansion_EvictV1_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PodExpansion_EvictV1_Call) RunAndReturn(run func(context.Context, *policyv1.Eviction) error) *PodExpansion_EvictV1_Call {
	_c.Call.Return(run)
	return _c
}

// EvictV1beta1 provides a mock function with given fields: ctx, eviction
func (_m *PodExpansion) EvictV1beta1(ctx context.Context, eviction *v1beta1.Eviction) error {
	ret := _m.Called(ctx, eviction)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1beta1.Eviction) error); ok {
		r0 = rf(ctx, eviction)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PodExpansion_EvictV1beta1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EvictV1beta1'
type PodExpansion_EvictV1beta1_Call struct {
	*mock.Call
}

// EvictV1beta1 is a helper method to define mock.On call
//   - ctx context.Context
//   - eviction *v1beta1.Eviction
func (_e *PodExpansion_Expecter) EvictV1beta1(ctx interface{}, eviction interface{}) *PodExpansion_EvictV1beta1_Call {
	return &PodExpansion_EvictV1beta1_Call{Call: _e.mock.On("EvictV1beta1", ctx, eviction)}
}

func (_c *PodExpansion_EvictV1beta1_Call) Run(run func(ctx context.Context, eviction *v1beta1.Eviction)) *PodExpansion_EvictV1beta1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1beta1.Eviction))
	})
	return _c
}

func (_c *PodExpansion_EvictV1beta1_Call) Return(_a0 error) *PodExpansion_EvictV1beta1_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PodExpansion_EvictV1beta1_Call) RunAndReturn(run func(context.Context, *v1beta1.Eviction) error) *PodExpansion_EvictV1beta1_Call {
	_c.Call.Return(run)
	return _c
}

// GetLogs provides a mock function with given fields: name, opts
func (_m *PodExpansion) GetLogs(name string, opts *v1.PodLogOptions) *rest.Request {
	ret := _m.Called(name, opts)

	var r0 *rest.Request
	if rf, ok := ret.Get(0).(func(string, *v1.PodLogOptions) *rest.Request); ok {
		r0 = rf(name, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rest.Request)
		}
	}

	return r0
}

// PodExpansion_GetLogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLogs'
type PodExpansion_GetLogs_Call struct {
	*mock.Call
}

// GetLogs is a helper method to define mock.On call
//   - name string
//   - opts *v1.PodLogOptions
func (_e *PodExpansion_Expecter) GetLogs(name interface{}, opts interface{}) *PodExpansion_GetLogs_Call {
	return &PodExpansion_GetLogs_Call{Call: _e.mock.On("GetLogs", name, opts)}
}

func (_c *PodExpansion_GetLogs_Call) Run(run func(name string, opts *v1.PodLogOptions)) *PodExpansion_GetLogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*v1.PodLogOptions))
	})
	return _c
}

func (_c *PodExpansion_GetLogs_Call) Return(_a0 *rest.Request) *PodExpansion_GetLogs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PodExpansion_GetLogs_Call) RunAndReturn(run func(string, *v1.PodLogOptions) *rest.Request) *PodExpansion_GetLogs_Call {
	_c.Call.Return(run)
	return _c
}

// ProxyGet provides a mock function with given fields: scheme, name, port, path, params
func (_m *PodExpansion) ProxyGet(scheme string, name string, port string, path string, params map[string]string) rest.ResponseWrapper {
	ret := _m.Called(scheme, name, port, path, params)

	var r0 rest.ResponseWrapper
	if rf, ok := ret.Get(0).(func(string, string, string, string, map[string]string) rest.ResponseWrapper); ok {
		r0 = rf(scheme, name, port, path, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(rest.ResponseWrapper)
		}
	}

	return r0
}

// PodExpansion_ProxyGet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProxyGet'
type PodExpansion_ProxyGet_Call struct {
	*mock.Call
}

// ProxyGet is a helper method to define mock.On call
//   - scheme string
//   - name string
//   - port string
//   - path string
//   - params map[string]string
func (_e *PodExpansion_Expecter) ProxyGet(scheme interface{}, name interface{}, port interface{}, path interface{}, params interface{}) *PodExpansion_ProxyGet_Call {
	return &PodExpansion_ProxyGet_Call{Call: _e.mock.On("ProxyGet", scheme, name, port, path, params)}
}

func (_c *PodExpansion_ProxyGet_Call) Run(run func(scheme string, name string, port string, path string, params map[string]string)) *PodExpansion_ProxyGet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string), args[3].(string), args[4].(map[string]string))
	})
	return _c
}

func (_c *PodExpansion_ProxyGet_Call) Return(_a0 rest.ResponseWrapper) *PodExpansion_ProxyGet_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PodExpansion_ProxyGet_Call) RunAndReturn(run func(string, string, string, string, map[string]string) rest.ResponseWrapper) *PodExpansion_ProxyGet_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewPodExpansion interface {
	mock.TestingT
	Cleanup(func())
}

// NewPodExpansion creates a new instance of PodExpansion. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPodExpansion(t mockConstructorTestingTNewPodExpansion) *PodExpansion {
	mock := &PodExpansion{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
