// Code generated by mockery v2.23.1. DO NOT EDIT.

package kubernetes_mocks

import (
	mock "github.com/stretchr/testify/mock"
	fields "k8s.io/apimachinery/pkg/fields"

	runtime "k8s.io/apimachinery/pkg/runtime"

	v1 "k8s.io/api/core/v1"
)

// EventExpansion is an autogenerated mock type for the EventExpansion type
type EventExpansion struct {
	mock.Mock
}

type EventExpansion_Expecter struct {
	mock *mock.Mock
}

func (_m *EventExpansion) EXPECT() *EventExpansion_Expecter {
	return &EventExpansion_Expecter{mock: &_m.Mock}
}

// CreateWithEventNamespace provides a mock function with given fields: event
func (_m *EventExpansion) CreateWithEventNamespace(event *v1.Event) (*v1.Event, error) {
	ret := _m.Called(event)

	var r0 *v1.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(*v1.Event) (*v1.Event, error)); ok {
		return rf(event)
	}
	if rf, ok := ret.Get(0).(func(*v1.Event) *v1.Event); ok {
		r0 = rf(event)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Event)
		}
	}

	if rf, ok := ret.Get(1).(func(*v1.Event) error); ok {
		r1 = rf(event)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EventExpansion_CreateWithEventNamespace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateWithEventNamespace'
type EventExpansion_CreateWithEventNamespace_Call struct {
	*mock.Call
}

// CreateWithEventNamespace is a helper method to define mock.On call
//   - event *v1.Event
func (_e *EventExpansion_Expecter) CreateWithEventNamespace(event interface{}) *EventExpansion_CreateWithEventNamespace_Call {
	return &EventExpansion_CreateWithEventNamespace_Call{Call: _e.mock.On("CreateWithEventNamespace", event)}
}

func (_c *EventExpansion_CreateWithEventNamespace_Call) Run(run func(event *v1.Event)) *EventExpansion_CreateWithEventNamespace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*v1.Event))
	})
	return _c
}

func (_c *EventExpansion_CreateWithEventNamespace_Call) Return(_a0 *v1.Event, _a1 error) *EventExpansion_CreateWithEventNamespace_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *EventExpansion_CreateWithEventNamespace_Call) RunAndReturn(run func(*v1.Event) (*v1.Event, error)) *EventExpansion_CreateWithEventNamespace_Call {
	_c.Call.Return(run)
	return _c
}

// GetFieldSelector provides a mock function with given fields: involvedObjectName, involvedObjectNamespace, involvedObjectKind, involvedObjectUID
func (_m *EventExpansion) GetFieldSelector(involvedObjectName *string, involvedObjectNamespace *string, involvedObjectKind *string, involvedObjectUID *string) fields.Selector {
	ret := _m.Called(involvedObjectName, involvedObjectNamespace, involvedObjectKind, involvedObjectUID)

	var r0 fields.Selector
	if rf, ok := ret.Get(0).(func(*string, *string, *string, *string) fields.Selector); ok {
		r0 = rf(involvedObjectName, involvedObjectNamespace, involvedObjectKind, involvedObjectUID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(fields.Selector)
		}
	}

	return r0
}

// EventExpansion_GetFieldSelector_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFieldSelector'
type EventExpansion_GetFieldSelector_Call struct {
	*mock.Call
}

// GetFieldSelector is a helper method to define mock.On call
//   - involvedObjectName *string
//   - involvedObjectNamespace *string
//   - involvedObjectKind *string
//   - involvedObjectUID *string
func (_e *EventExpansion_Expecter) GetFieldSelector(involvedObjectName interface{}, involvedObjectNamespace interface{}, involvedObjectKind interface{}, involvedObjectUID interface{}) *EventExpansion_GetFieldSelector_Call {
	return &EventExpansion_GetFieldSelector_Call{Call: _e.mock.On("GetFieldSelector", involvedObjectName, involvedObjectNamespace, involvedObjectKind, involvedObjectUID)}
}

func (_c *EventExpansion_GetFieldSelector_Call) Run(run func(involvedObjectName *string, involvedObjectNamespace *string, involvedObjectKind *string, involvedObjectUID *string)) *EventExpansion_GetFieldSelector_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*string), args[1].(*string), args[2].(*string), args[3].(*string))
	})
	return _c
}

func (_c *EventExpansion_GetFieldSelector_Call) Return(_a0 fields.Selector) *EventExpansion_GetFieldSelector_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EventExpansion_GetFieldSelector_Call) RunAndReturn(run func(*string, *string, *string, *string) fields.Selector) *EventExpansion_GetFieldSelector_Call {
	_c.Call.Return(run)
	return _c
}

// PatchWithEventNamespace provides a mock function with given fields: event, data
func (_m *EventExpansion) PatchWithEventNamespace(event *v1.Event, data []byte) (*v1.Event, error) {
	ret := _m.Called(event, data)

	var r0 *v1.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(*v1.Event, []byte) (*v1.Event, error)); ok {
		return rf(event, data)
	}
	if rf, ok := ret.Get(0).(func(*v1.Event, []byte) *v1.Event); ok {
		r0 = rf(event, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Event)
		}
	}

	if rf, ok := ret.Get(1).(func(*v1.Event, []byte) error); ok {
		r1 = rf(event, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EventExpansion_PatchWithEventNamespace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchWithEventNamespace'
type EventExpansion_PatchWithEventNamespace_Call struct {
	*mock.Call
}

// PatchWithEventNamespace is a helper method to define mock.On call
//   - event *v1.Event
//   - data []byte
func (_e *EventExpansion_Expecter) PatchWithEventNamespace(event interface{}, data interface{}) *EventExpansion_PatchWithEventNamespace_Call {
	return &EventExpansion_PatchWithEventNamespace_Call{Call: _e.mock.On("PatchWithEventNamespace", event, data)}
}

func (_c *EventExpansion_PatchWithEventNamespace_Call) Run(run func(event *v1.Event, data []byte)) *EventExpansion_PatchWithEventNamespace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*v1.Event), args[1].([]byte))
	})
	return _c
}

func (_c *EventExpansion_PatchWithEventNamespace_Call) Return(_a0 *v1.Event, _a1 error) *EventExpansion_PatchWithEventNamespace_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *EventExpansion_PatchWithEventNamespace_Call) RunAndReturn(run func(*v1.Event, []byte) (*v1.Event, error)) *EventExpansion_PatchWithEventNamespace_Call {
	_c.Call.Return(run)
	return _c
}

// Search provides a mock function with given fields: scheme, objOrRef
func (_m *EventExpansion) Search(scheme *runtime.Scheme, objOrRef runtime.Object) (*v1.EventList, error) {
	ret := _m.Called(scheme, objOrRef)

	var r0 *v1.EventList
	var r1 error
	if rf, ok := ret.Get(0).(func(*runtime.Scheme, runtime.Object) (*v1.EventList, error)); ok {
		return rf(scheme, objOrRef)
	}
	if rf, ok := ret.Get(0).(func(*runtime.Scheme, runtime.Object) *v1.EventList); ok {
		r0 = rf(scheme, objOrRef)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.EventList)
		}
	}

	if rf, ok := ret.Get(1).(func(*runtime.Scheme, runtime.Object) error); ok {
		r1 = rf(scheme, objOrRef)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EventExpansion_Search_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Search'
type EventExpansion_Search_Call struct {
	*mock.Call
}

// Search is a helper method to define mock.On call
//   - scheme *runtime.Scheme
//   - objOrRef runtime.Object
func (_e *EventExpansion_Expecter) Search(scheme interface{}, objOrRef interface{}) *EventExpansion_Search_Call {
	return &EventExpansion_Search_Call{Call: _e.mock.On("Search", scheme, objOrRef)}
}

func (_c *EventExpansion_Search_Call) Run(run func(scheme *runtime.Scheme, objOrRef runtime.Object)) *EventExpansion_Search_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*runtime.Scheme), args[1].(runtime.Object))
	})
	return _c
}

func (_c *EventExpansion_Search_Call) Return(_a0 *v1.EventList, _a1 error) *EventExpansion_Search_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *EventExpansion_Search_Call) RunAndReturn(run func(*runtime.Scheme, runtime.Object) (*v1.EventList, error)) *EventExpansion_Search_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateWithEventNamespace provides a mock function with given fields: event
func (_m *EventExpansion) UpdateWithEventNamespace(event *v1.Event) (*v1.Event, error) {
	ret := _m.Called(event)

	var r0 *v1.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(*v1.Event) (*v1.Event, error)); ok {
		return rf(event)
	}
	if rf, ok := ret.Get(0).(func(*v1.Event) *v1.Event); ok {
		r0 = rf(event)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Event)
		}
	}

	if rf, ok := ret.Get(1).(func(*v1.Event) error); ok {
		r1 = rf(event)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EventExpansion_UpdateWithEventNamespace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateWithEventNamespace'
type EventExpansion_UpdateWithEventNamespace_Call struct {
	*mock.Call
}

// UpdateWithEventNamespace is a helper method to define mock.On call
//   - event *v1.Event
func (_e *EventExpansion_Expecter) UpdateWithEventNamespace(event interface{}) *EventExpansion_UpdateWithEventNamespace_Call {
	return &EventExpansion_UpdateWithEventNamespace_Call{Call: _e.mock.On("UpdateWithEventNamespace", event)}
}

func (_c *EventExpansion_UpdateWithEventNamespace_Call) Run(run func(event *v1.Event)) *EventExpansion_UpdateWithEventNamespace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*v1.Event))
	})
	return _c
}

func (_c *EventExpansion_UpdateWithEventNamespace_Call) Return(_a0 *v1.Event, _a1 error) *EventExpansion_UpdateWithEventNamespace_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *EventExpansion_UpdateWithEventNamespace_Call) RunAndReturn(run func(*v1.Event) (*v1.Event, error)) *EventExpansion_UpdateWithEventNamespace_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewEventExpansion interface {
	mock.TestingT
	Cleanup(func())
}

// NewEventExpansion creates a new instance of EventExpansion. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewEventExpansion(t mockConstructorTestingTNewEventExpansion) *EventExpansion {
	mock := &EventExpansion{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
