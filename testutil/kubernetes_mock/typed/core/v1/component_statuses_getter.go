// Code generated by mockery v2.23.1. DO NOT EDIT.

package kubernetes_mocks

import (
	mock "github.com/stretchr/testify/mock"
	v1 "k8s.io/client-go/kubernetes/typed/core/v1"
)

// ComponentStatusesGetter is an autogenerated mock type for the ComponentStatusesGetter type
type ComponentStatusesGetter struct {
	mock.Mock
}

type ComponentStatusesGetter_Expecter struct {
	mock *mock.Mock
}

func (_m *ComponentStatusesGetter) EXPECT() *ComponentStatusesGetter_Expecter {
	return &ComponentStatusesGetter_Expecter{mock: &_m.Mock}
}

// ComponentStatuses provides a mock function with given fields:
func (_m *ComponentStatusesGetter) ComponentStatuses() v1.ComponentStatusInterface {
	ret := _m.Called()

	var r0 v1.ComponentStatusInterface
	if rf, ok := ret.Get(0).(func() v1.ComponentStatusInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1.ComponentStatusInterface)
		}
	}

	return r0
}

// ComponentStatusesGetter_ComponentStatuses_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ComponentStatuses'
type ComponentStatusesGetter_ComponentStatuses_Call struct {
	*mock.Call
}

// ComponentStatuses is a helper method to define mock.On call
func (_e *ComponentStatusesGetter_Expecter) ComponentStatuses() *ComponentStatusesGetter_ComponentStatuses_Call {
	return &ComponentStatusesGetter_ComponentStatuses_Call{Call: _e.mock.On("ComponentStatuses")}
}

func (_c *ComponentStatusesGetter_ComponentStatuses_Call) Run(run func()) *ComponentStatusesGetter_ComponentStatuses_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ComponentStatusesGetter_ComponentStatuses_Call) Return(_a0 v1.ComponentStatusInterface) *ComponentStatusesGetter_ComponentStatuses_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ComponentStatusesGetter_ComponentStatuses_Call) RunAndReturn(run func() v1.ComponentStatusInterface) *ComponentStatusesGetter_ComponentStatuses_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewComponentStatusesGetter interface {
	mock.TestingT
	Cleanup(func())
}

// NewComponentStatusesGetter creates a new instance of ComponentStatusesGetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewComponentStatusesGetter(t mockConstructorTestingTNewComponentStatusesGetter) *ComponentStatusesGetter {
	mock := &ComponentStatusesGetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
