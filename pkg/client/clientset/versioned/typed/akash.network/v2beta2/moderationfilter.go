/*
Copyright The Akash Network Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v2beta2

import (
	"context"
	"time"

	v2beta2 "github.com/akash-network/provider/pkg/apis/akash.network/v2beta2"
	scheme "github.com/akash-network/provider/pkg/client/clientset/versioned/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	rest "k8s.io/client-go/rest"
)

// ModerationFiltersGetter has a method to return a ModerationFilterInterface.
// A group's client should implement this interface.
type ModerationFiltersGetter interface {
	ModerationFilters(namespace string) ModerationFilterInterface
}

// ModerationFilterInterface has methods to work with ModerationFilter resources.
type ModerationFilterInterface interface {
	List(ctx context.Context, opts v1.ListOptions) (*v2beta2.ModerationFilterList, error)
	ModerationFilterExpansion
}

// moderationfilters implements ModerationFilterInterface
type moderationfilters struct {
	client rest.Interface
	ns     string
}

// newModerationFilters returns a ModerationFilters
func newModerationFilters(c *AkashV2beta2Client, namespace string) *moderationfilters {
	return &moderationfilters{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// List takes label and field selectors, and returns the list of ModerationFilters that match those selectors.
func (c *moderationfilters) List(ctx context.Context, opts v1.ListOptions) (result *v2beta2.ModerationFilterList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v2beta2.ModerationFilterList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("moderationfilters").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do(ctx).
		Into(result)
	return
}
