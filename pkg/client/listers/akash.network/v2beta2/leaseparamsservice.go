/*
Copyright The Akash Network Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v2beta2

import (
	v2beta2 "github.com/akash-network/provider/pkg/apis/akash.network/v2beta2"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// LeaseParamsServiceLister helps list LeaseParamsServices.
// All objects returned here must be treated as read-only.
type LeaseParamsServiceLister interface {
	// List lists all LeaseParamsServices in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v2beta2.LeaseParamsService, err error)
	// LeaseParamsServices returns an object that can list and get LeaseParamsServices.
	LeaseParamsServices(namespace string) LeaseParamsServiceNamespaceLister
	LeaseParamsServiceListerExpansion
}

// leaseParamsServiceLister implements the LeaseParamsServiceLister interface.
type leaseParamsServiceLister struct {
	indexer cache.Indexer
}

// NewLeaseParamsServiceLister returns a new LeaseParamsServiceLister.
func NewLeaseParamsServiceLister(indexer cache.Indexer) LeaseParamsServiceLister {
	return &leaseParamsServiceLister{indexer: indexer}
}

// List lists all LeaseParamsServices in the indexer.
func (s *leaseParamsServiceLister) List(selector labels.Selector) (ret []*v2beta2.LeaseParamsService, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v2beta2.LeaseParamsService))
	})
	return ret, err
}

// LeaseParamsServices returns an object that can list and get LeaseParamsServices.
func (s *leaseParamsServiceLister) LeaseParamsServices(namespace string) LeaseParamsServiceNamespaceLister {
	return leaseParamsServiceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// LeaseParamsServiceNamespaceLister helps list and get LeaseParamsServices.
// All objects returned here must be treated as read-only.
type LeaseParamsServiceNamespaceLister interface {
	// List lists all LeaseParamsServices in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v2beta2.LeaseParamsService, err error)
	// Get retrieves the LeaseParamsService from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v2beta2.LeaseParamsService, error)
	LeaseParamsServiceNamespaceListerExpansion
}

// leaseParamsServiceNamespaceLister implements the LeaseParamsServiceNamespaceLister
// interface.
type leaseParamsServiceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all LeaseParamsServices in the indexer for a given namespace.
func (s leaseParamsServiceNamespaceLister) List(selector labels.Selector) (ret []*v2beta2.LeaseParamsService, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v2beta2.LeaseParamsService))
	})
	return ret, err
}

// Get retrieves the LeaseParamsService from the indexer for a given namespace and name.
func (s leaseParamsServiceNamespaceLister) Get(name string) (*v2beta2.LeaseParamsService, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v2beta2.Resource("leaseparamsservice"), name)
	}
	return obj.(*v2beta2.LeaseParamsService), nil
}
