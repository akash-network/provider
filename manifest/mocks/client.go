// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	v1beta3 "github.com/akash-network/akash-api/go/node/deployment/v1beta3"

	v2beta2 "github.com/akash-network/akash-api/go/manifest/v2beta2"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

type Client_Expecter struct {
	mock *mock.Mock
}

func (_m *Client) EXPECT() *Client_Expecter {
	return &Client_Expecter{mock: &_m.Mock}
}

// IsActive provides a mock function with given fields: _a0, _a1
func (_m *Client) IsActive(_a0 context.Context, _a1 v1beta3.DeploymentID) (bool, error) {
	ret := _m.Called(_a0, _a1)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, v1beta3.DeploymentID) (bool, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, v1beta3.DeploymentID) bool); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, v1beta3.DeploymentID) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_IsActive_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsActive'
type Client_IsActive_Call struct {
	*mock.Call
}

// IsActive is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 v1beta3.DeploymentID
func (_e *Client_Expecter) IsActive(_a0 interface{}, _a1 interface{}) *Client_IsActive_Call {
	return &Client_IsActive_Call{Call: _e.mock.On("IsActive", _a0, _a1)}
}

func (_c *Client_IsActive_Call) Run(run func(_a0 context.Context, _a1 v1beta3.DeploymentID)) *Client_IsActive_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(v1beta3.DeploymentID))
	})
	return _c
}

func (_c *Client_IsActive_Call) Return(_a0 bool, _a1 error) *Client_IsActive_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_IsActive_Call) RunAndReturn(run func(context.Context, v1beta3.DeploymentID) (bool, error)) *Client_IsActive_Call {
	_c.Call.Return(run)
	return _c
}

// Submit provides a mock function with given fields: _a0, _a1, _a2
func (_m *Client) Submit(_a0 context.Context, _a1 v1beta3.DeploymentID, _a2 v2beta2.Manifest) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, v1beta3.DeploymentID, v2beta2.Manifest) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Client_Submit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Submit'
type Client_Submit_Call struct {
	*mock.Call
}

// Submit is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 v1beta3.DeploymentID
//   - _a2 v2beta2.Manifest
func (_e *Client_Expecter) Submit(_a0 interface{}, _a1 interface{}, _a2 interface{}) *Client_Submit_Call {
	return &Client_Submit_Call{Call: _e.mock.On("Submit", _a0, _a1, _a2)}
}

func (_c *Client_Submit_Call) Run(run func(_a0 context.Context, _a1 v1beta3.DeploymentID, _a2 v2beta2.Manifest)) *Client_Submit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(v1beta3.DeploymentID), args[2].(v2beta2.Manifest))
	})
	return _c
}

func (_c *Client_Submit_Call) Return(_a0 error) *Client_Submit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_Submit_Call) RunAndReturn(run func(context.Context, v1beta3.DeploymentID, v2beta2.Manifest) error) *Client_Submit_Call {
	_c.Call.Return(run)
	return _c
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
