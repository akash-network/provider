// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package provider

import (
	"context"

	"github.com/akash-network/provider/cluster"
	"github.com/akash-network/provider/cluster/types/v1beta3"
	"github.com/akash-network/provider/manifest"
	"github.com/cosmos/cosmos-sdk/types"
	mock "github.com/stretchr/testify/mock"
	"pkg.akt.dev/go/node/deployment/v1beta4"
	"pkg.akt.dev/go/provider/client"
	"pkg.akt.dev/go/provider/v1"
)

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

type Client_Expecter struct {
	mock *mock.Mock
}

func (_m *Client) EXPECT() *Client_Expecter {
	return &Client_Expecter{mock: &_m.Mock}
}

// Cluster provides a mock function for the type Client
func (_mock *Client) Cluster() cluster.Client {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Cluster")
	}

	var r0 cluster.Client
	if returnFunc, ok := ret.Get(0).(func() cluster.Client); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cluster.Client)
		}
	}
	return r0
}

// Client_Cluster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Cluster'
type Client_Cluster_Call struct {
	*mock.Call
}

// Cluster is a helper method to define mock.On call
func (_e *Client_Expecter) Cluster() *Client_Cluster_Call {
	return &Client_Cluster_Call{Call: _e.mock.On("Cluster")}
}

func (_c *Client_Cluster_Call) Run(run func()) *Client_Cluster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Client_Cluster_Call) Return(client cluster.Client) *Client_Cluster_Call {
	_c.Call.Return(client)
	return _c
}

func (_c *Client_Cluster_Call) RunAndReturn(run func() cluster.Client) *Client_Cluster_Call {
	_c.Call.Return(run)
	return _c
}

// ClusterService provides a mock function for the type Client
func (_mock *Client) ClusterService() cluster.Service {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ClusterService")
	}

	var r0 cluster.Service
	if returnFunc, ok := ret.Get(0).(func() cluster.Service); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cluster.Service)
		}
	}
	return r0
}

// Client_ClusterService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClusterService'
type Client_ClusterService_Call struct {
	*mock.Call
}

// ClusterService is a helper method to define mock.On call
func (_e *Client_Expecter) ClusterService() *Client_ClusterService_Call {
	return &Client_ClusterService_Call{Call: _e.mock.On("ClusterService")}
}

func (_c *Client_ClusterService_Call) Run(run func()) *Client_ClusterService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Client_ClusterService_Call) Return(service cluster.Service) *Client_ClusterService_Call {
	_c.Call.Return(service)
	return _c
}

func (_c *Client_ClusterService_Call) RunAndReturn(run func() cluster.Service) *Client_ClusterService_Call {
	_c.Call.Return(run)
	return _c
}

// Hostname provides a mock function for the type Client
func (_mock *Client) Hostname() v1beta3.HostnameServiceClient {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Hostname")
	}

	var r0 v1beta3.HostnameServiceClient
	if returnFunc, ok := ret.Get(0).(func() v1beta3.HostnameServiceClient); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1beta3.HostnameServiceClient)
		}
	}
	return r0
}

// Client_Hostname_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Hostname'
type Client_Hostname_Call struct {
	*mock.Call
}

// Hostname is a helper method to define mock.On call
func (_e *Client_Expecter) Hostname() *Client_Hostname_Call {
	return &Client_Hostname_Call{Call: _e.mock.On("Hostname")}
}

func (_c *Client_Hostname_Call) Run(run func()) *Client_Hostname_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Client_Hostname_Call) Return(hostnameServiceClient v1beta3.HostnameServiceClient) *Client_Hostname_Call {
	_c.Call.Return(hostnameServiceClient)
	return _c
}

func (_c *Client_Hostname_Call) RunAndReturn(run func() v1beta3.HostnameServiceClient) *Client_Hostname_Call {
	_c.Call.Return(run)
	return _c
}

// Manifest provides a mock function for the type Client
func (_mock *Client) Manifest() manifest.Client {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Manifest")
	}

	var r0 manifest.Client
	if returnFunc, ok := ret.Get(0).(func() manifest.Client); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(manifest.Client)
		}
	}
	return r0
}

// Client_Manifest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Manifest'
type Client_Manifest_Call struct {
	*mock.Call
}

// Manifest is a helper method to define mock.On call
func (_e *Client_Expecter) Manifest() *Client_Manifest_Call {
	return &Client_Manifest_Call{Call: _e.mock.On("Manifest")}
}

func (_c *Client_Manifest_Call) Run(run func()) *Client_Manifest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Client_Manifest_Call) Return(client manifest.Client) *Client_Manifest_Call {
	_c.Call.Return(client)
	return _c
}

func (_c *Client_Manifest_Call) RunAndReturn(run func() manifest.Client) *Client_Manifest_Call {
	_c.Call.Return(run)
	return _c
}

// Status provides a mock function for the type Client
func (_mock *Client) Status(context1 context.Context) (*rest.ProviderStatus, error) {
	ret := _mock.Called(context1)

	if len(ret) == 0 {
		panic("no return value specified for Status")
	}

	var r0 *rest.ProviderStatus
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (*rest.ProviderStatus, error)); ok {
		return returnFunc(context1)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) *rest.ProviderStatus); ok {
		r0 = returnFunc(context1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rest.ProviderStatus)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(context1)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Client_Status_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Status'
type Client_Status_Call struct {
	*mock.Call
}

// Status is a helper method to define mock.On call
//   - context1 context.Context
func (_e *Client_Expecter) Status(context1 interface{}) *Client_Status_Call {
	return &Client_Status_Call{Call: _e.mock.On("Status", context1)}
}

func (_c *Client_Status_Call) Run(run func(context1 context.Context)) *Client_Status_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Client_Status_Call) Return(providerStatus *rest.ProviderStatus, err error) *Client_Status_Call {
	_c.Call.Return(providerStatus, err)
	return _c
}

func (_c *Client_Status_Call) RunAndReturn(run func(context1 context.Context) (*rest.ProviderStatus, error)) *Client_Status_Call {
	_c.Call.Return(run)
	return _c
}

// StatusV1 provides a mock function for the type Client
func (_mock *Client) StatusV1(ctx context.Context) (*v1.Status, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for StatusV1")
	}

	var r0 *v1.Status
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (*v1.Status, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) *v1.Status); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Status)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Client_StatusV1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StatusV1'
type Client_StatusV1_Call struct {
	*mock.Call
}

// StatusV1 is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Client_Expecter) StatusV1(ctx interface{}) *Client_StatusV1_Call {
	return &Client_StatusV1_Call{Call: _e.mock.On("StatusV1", ctx)}
}

func (_c *Client_StatusV1_Call) Run(run func(ctx context.Context)) *Client_StatusV1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Client_StatusV1_Call) Return(status *v1.Status, err error) *Client_StatusV1_Call {
	_c.Call.Return(status, err)
	return _c
}

func (_c *Client_StatusV1_Call) RunAndReturn(run func(ctx context.Context) (*v1.Status, error)) *Client_StatusV1_Call {
	_c.Call.Return(run)
	return _c
}

// Validate provides a mock function for the type Client
func (_mock *Client) Validate(context1 context.Context, address types.Address, groupSpec v1beta4.GroupSpec) (rest.ValidateGroupSpecResult, error) {
	ret := _mock.Called(context1, address, groupSpec)

	if len(ret) == 0 {
		panic("no return value specified for Validate")
	}

	var r0 rest.ValidateGroupSpecResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, types.Address, v1beta4.GroupSpec) (rest.ValidateGroupSpecResult, error)); ok {
		return returnFunc(context1, address, groupSpec)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, types.Address, v1beta4.GroupSpec) rest.ValidateGroupSpecResult); ok {
		r0 = returnFunc(context1, address, groupSpec)
	} else {
		r0 = ret.Get(0).(rest.ValidateGroupSpecResult)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, types.Address, v1beta4.GroupSpec) error); ok {
		r1 = returnFunc(context1, address, groupSpec)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Client_Validate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Validate'
type Client_Validate_Call struct {
	*mock.Call
}

// Validate is a helper method to define mock.On call
//   - context1 context.Context
//   - address types.Address
//   - groupSpec v1beta4.GroupSpec
func (_e *Client_Expecter) Validate(context1 interface{}, address interface{}, groupSpec interface{}) *Client_Validate_Call {
	return &Client_Validate_Call{Call: _e.mock.On("Validate", context1, address, groupSpec)}
}

func (_c *Client_Validate_Call) Run(run func(context1 context.Context, address types.Address, groupSpec v1beta4.GroupSpec)) *Client_Validate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 types.Address
		if args[1] != nil {
			arg1 = args[1].(types.Address)
		}
		var arg2 v1beta4.GroupSpec
		if args[2] != nil {
			arg2 = args[2].(v1beta4.GroupSpec)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *Client_Validate_Call) Return(validateGroupSpecResult rest.ValidateGroupSpecResult, err error) *Client_Validate_Call {
	_c.Call.Return(validateGroupSpecResult, err)
	return _c
}

func (_c *Client_Validate_Call) RunAndReturn(run func(context1 context.Context, address types.Address, groupSpec v1beta4.GroupSpec) (rest.ValidateGroupSpecResult, error)) *Client_Validate_Call {
	_c.Call.Return(run)
	return _c
}
