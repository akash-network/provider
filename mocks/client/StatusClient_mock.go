// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package provider

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"pkg.akt.dev/go/provider/client"
	"pkg.akt.dev/go/provider/v1"
)

// NewStatusClient creates a new instance of StatusClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStatusClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *StatusClient {
	mock := &StatusClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// StatusClient is an autogenerated mock type for the StatusClient type
type StatusClient struct {
	mock.Mock
}

type StatusClient_Expecter struct {
	mock *mock.Mock
}

func (_m *StatusClient) EXPECT() *StatusClient_Expecter {
	return &StatusClient_Expecter{mock: &_m.Mock}
}

// Status provides a mock function for the type StatusClient
func (_mock *StatusClient) Status(context1 context.Context) (*rest.ProviderStatus, error) {
	ret := _mock.Called(context1)

	if len(ret) == 0 {
		panic("no return value specified for Status")
	}

	var r0 *rest.ProviderStatus
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (*rest.ProviderStatus, error)); ok {
		return returnFunc(context1)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) *rest.ProviderStatus); ok {
		r0 = returnFunc(context1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rest.ProviderStatus)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(context1)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// StatusClient_Status_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Status'
type StatusClient_Status_Call struct {
	*mock.Call
}

// Status is a helper method to define mock.On call
//   - context1 context.Context
func (_e *StatusClient_Expecter) Status(context1 interface{}) *StatusClient_Status_Call {
	return &StatusClient_Status_Call{Call: _e.mock.On("Status", context1)}
}

func (_c *StatusClient_Status_Call) Run(run func(context1 context.Context)) *StatusClient_Status_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *StatusClient_Status_Call) Return(providerStatus *rest.ProviderStatus, err error) *StatusClient_Status_Call {
	_c.Call.Return(providerStatus, err)
	return _c
}

func (_c *StatusClient_Status_Call) RunAndReturn(run func(context1 context.Context) (*rest.ProviderStatus, error)) *StatusClient_Status_Call {
	_c.Call.Return(run)
	return _c
}

// StatusV1 provides a mock function for the type StatusClient
func (_mock *StatusClient) StatusV1(ctx context.Context) (*v1.Status, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for StatusV1")
	}

	var r0 *v1.Status
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (*v1.Status, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) *v1.Status); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Status)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// StatusClient_StatusV1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StatusV1'
type StatusClient_StatusV1_Call struct {
	*mock.Call
}

// StatusV1 is a helper method to define mock.On call
//   - ctx context.Context
func (_e *StatusClient_Expecter) StatusV1(ctx interface{}) *StatusClient_StatusV1_Call {
	return &StatusClient_StatusV1_Call{Call: _e.mock.On("StatusV1", ctx)}
}

func (_c *StatusClient_StatusV1_Call) Run(run func(ctx context.Context)) *StatusClient_StatusV1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *StatusClient_StatusV1_Call) Return(status *v1.Status, err error) *StatusClient_StatusV1_Call {
	_c.Call.Return(status, err)
	return _c
}

func (_c *StatusClient_StatusV1_Call) RunAndReturn(run func(ctx context.Context) (*v1.Status, error)) *StatusClient_StatusV1_Call {
	_c.Call.Return(run)
	return _c
}
