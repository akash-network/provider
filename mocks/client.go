// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	context "context"

	cluster "github.com/akash-network/provider/cluster"

	deploymentv1beta3 "github.com/akash-network/akash-api/go/node/deployment/v1beta3"

	manifest "github.com/akash-network/provider/manifest"

	mock "github.com/stretchr/testify/mock"

	provider "github.com/akash-network/provider"

	types "github.com/cosmos/cosmos-sdk/types"

	v1beta3 "github.com/akash-network/provider/cluster/types/v1beta3"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

type Client_Expecter struct {
	mock *mock.Mock
}

func (_m *Client) EXPECT() *Client_Expecter {
	return &Client_Expecter{mock: &_m.Mock}
}

// Cluster provides a mock function with given fields:
func (_m *Client) Cluster() cluster.Client {
	ret := _m.Called()

	var r0 cluster.Client
	if rf, ok := ret.Get(0).(func() cluster.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cluster.Client)
		}
	}

	return r0
}

// Client_Cluster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Cluster'
type Client_Cluster_Call struct {
	*mock.Call
}

// Cluster is a helper method to define mock.On call
func (_e *Client_Expecter) Cluster() *Client_Cluster_Call {
	return &Client_Cluster_Call{Call: _e.mock.On("Cluster")}
}

func (_c *Client_Cluster_Call) Run(run func()) *Client_Cluster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Client_Cluster_Call) Return(_a0 cluster.Client) *Client_Cluster_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_Cluster_Call) RunAndReturn(run func() cluster.Client) *Client_Cluster_Call {
	_c.Call.Return(run)
	return _c
}

// ClusterService provides a mock function with given fields:
func (_m *Client) ClusterService() cluster.Service {
	ret := _m.Called()

	var r0 cluster.Service
	if rf, ok := ret.Get(0).(func() cluster.Service); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cluster.Service)
		}
	}

	return r0
}

// Client_ClusterService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClusterService'
type Client_ClusterService_Call struct {
	*mock.Call
}

// ClusterService is a helper method to define mock.On call
func (_e *Client_Expecter) ClusterService() *Client_ClusterService_Call {
	return &Client_ClusterService_Call{Call: _e.mock.On("ClusterService")}
}

func (_c *Client_ClusterService_Call) Run(run func()) *Client_ClusterService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Client_ClusterService_Call) Return(_a0 cluster.Service) *Client_ClusterService_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_ClusterService_Call) RunAndReturn(run func() cluster.Service) *Client_ClusterService_Call {
	_c.Call.Return(run)
	return _c
}

// Hostname provides a mock function with given fields:
func (_m *Client) Hostname() v1beta3.HostnameServiceClient {
	ret := _m.Called()

	var r0 v1beta3.HostnameServiceClient
	if rf, ok := ret.Get(0).(func() v1beta3.HostnameServiceClient); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1beta3.HostnameServiceClient)
		}
	}

	return r0
}

// Client_Hostname_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Hostname'
type Client_Hostname_Call struct {
	*mock.Call
}

// Hostname is a helper method to define mock.On call
func (_e *Client_Expecter) Hostname() *Client_Hostname_Call {
	return &Client_Hostname_Call{Call: _e.mock.On("Hostname")}
}

func (_c *Client_Hostname_Call) Run(run func()) *Client_Hostname_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Client_Hostname_Call) Return(_a0 v1beta3.HostnameServiceClient) *Client_Hostname_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_Hostname_Call) RunAndReturn(run func() v1beta3.HostnameServiceClient) *Client_Hostname_Call {
	_c.Call.Return(run)
	return _c
}

// Manifest provides a mock function with given fields:
func (_m *Client) Manifest() manifest.Client {
	ret := _m.Called()

	var r0 manifest.Client
	if rf, ok := ret.Get(0).(func() manifest.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(manifest.Client)
		}
	}

	return r0
}

// Client_Manifest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Manifest'
type Client_Manifest_Call struct {
	*mock.Call
}

// Manifest is a helper method to define mock.On call
func (_e *Client_Expecter) Manifest() *Client_Manifest_Call {
	return &Client_Manifest_Call{Call: _e.mock.On("Manifest")}
}

func (_c *Client_Manifest_Call) Run(run func()) *Client_Manifest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Client_Manifest_Call) Return(_a0 manifest.Client) *Client_Manifest_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_Manifest_Call) RunAndReturn(run func() manifest.Client) *Client_Manifest_Call {
	_c.Call.Return(run)
	return _c
}

// Status provides a mock function with given fields: _a0
func (_m *Client) Status(_a0 context.Context) (*provider.Status, error) {
	ret := _m.Called(_a0)

	var r0 *provider.Status
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*provider.Status, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *provider.Status); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*provider.Status)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_Status_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Status'
type Client_Status_Call struct {
	*mock.Call
}

// Status is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *Client_Expecter) Status(_a0 interface{}) *Client_Status_Call {
	return &Client_Status_Call{Call: _e.mock.On("Status", _a0)}
}

func (_c *Client_Status_Call) Run(run func(_a0 context.Context)) *Client_Status_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Client_Status_Call) Return(_a0 *provider.Status, _a1 error) *Client_Status_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_Status_Call) RunAndReturn(run func(context.Context) (*provider.Status, error)) *Client_Status_Call {
	_c.Call.Return(run)
	return _c
}

// Validate provides a mock function with given fields: _a0, _a1, _a2
func (_m *Client) Validate(_a0 context.Context, _a1 types.Address, _a2 deploymentv1beta3.GroupSpec) (provider.ValidateGroupSpecResult, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 provider.ValidateGroupSpecResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.Address, deploymentv1beta3.GroupSpec) (provider.ValidateGroupSpecResult, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.Address, deploymentv1beta3.GroupSpec) provider.ValidateGroupSpecResult); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(provider.ValidateGroupSpecResult)
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.Address, deploymentv1beta3.GroupSpec) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_Validate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Validate'
type Client_Validate_Call struct {
	*mock.Call
}

// Validate is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 types.Address
//   - _a2 deploymentv1beta3.GroupSpec
func (_e *Client_Expecter) Validate(_a0 interface{}, _a1 interface{}, _a2 interface{}) *Client_Validate_Call {
	return &Client_Validate_Call{Call: _e.mock.On("Validate", _a0, _a1, _a2)}
}

func (_c *Client_Validate_Call) Run(run func(_a0 context.Context, _a1 types.Address, _a2 deploymentv1beta3.GroupSpec)) *Client_Validate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.Address), args[2].(deploymentv1beta3.GroupSpec))
	})
	return _c
}

func (_c *Client_Validate_Call) Return(_a0 provider.ValidateGroupSpecResult, _a1 error) *Client_Validate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_Validate_Call) RunAndReturn(run func(context.Context, types.Address, deploymentv1beta3.GroupSpec) (provider.ValidateGroupSpecResult, error)) *Client_Validate_Call {
	_c.Call.Return(run)
	return _c
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
