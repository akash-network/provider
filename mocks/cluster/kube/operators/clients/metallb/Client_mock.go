// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package metallb

import (
	"context"

	"github.com/akash-network/provider/cluster/types/v1beta3/clients/ip"
	mock "github.com/stretchr/testify/mock"
	"pkg.akt.dev/go/node/market/v1"
)

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

type Client_Expecter struct {
	mock *mock.Mock
}

func (_m *Client) EXPECT() *Client_Expecter {
	return &Client_Expecter{mock: &_m.Mock}
}

// CreateIPPassthrough provides a mock function for the type Client
func (_mock *Client) CreateIPPassthrough(ctx context.Context, directive ip.ClusterIPPassthroughDirective) error {
	ret := _mock.Called(ctx, directive)

	if len(ret) == 0 {
		panic("no return value specified for CreateIPPassthrough")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ip.ClusterIPPassthroughDirective) error); ok {
		r0 = returnFunc(ctx, directive)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Client_CreateIPPassthrough_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateIPPassthrough'
type Client_CreateIPPassthrough_Call struct {
	*mock.Call
}

// CreateIPPassthrough is a helper method to define mock.On call
//   - ctx context.Context
//   - directive ip.ClusterIPPassthroughDirective
func (_e *Client_Expecter) CreateIPPassthrough(ctx interface{}, directive interface{}) *Client_CreateIPPassthrough_Call {
	return &Client_CreateIPPassthrough_Call{Call: _e.mock.On("CreateIPPassthrough", ctx, directive)}
}

func (_c *Client_CreateIPPassthrough_Call) Run(run func(ctx context.Context, directive ip.ClusterIPPassthroughDirective)) *Client_CreateIPPassthrough_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 ip.ClusterIPPassthroughDirective
		if args[1] != nil {
			arg1 = args[1].(ip.ClusterIPPassthroughDirective)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Client_CreateIPPassthrough_Call) Return(err error) *Client_CreateIPPassthrough_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Client_CreateIPPassthrough_Call) RunAndReturn(run func(ctx context.Context, directive ip.ClusterIPPassthroughDirective) error) *Client_CreateIPPassthrough_Call {
	_c.Call.Return(run)
	return _c
}

// DetectPoolChanges provides a mock function for the type Client
func (_mock *Client) DetectPoolChanges(ctx context.Context) (<-chan struct{}, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for DetectPoolChanges")
	}

	var r0 <-chan struct{}
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (<-chan struct{}, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) <-chan struct{}); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Client_DetectPoolChanges_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DetectPoolChanges'
type Client_DetectPoolChanges_Call struct {
	*mock.Call
}

// DetectPoolChanges is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Client_Expecter) DetectPoolChanges(ctx interface{}) *Client_DetectPoolChanges_Call {
	return &Client_DetectPoolChanges_Call{Call: _e.mock.On("DetectPoolChanges", ctx)}
}

func (_c *Client_DetectPoolChanges_Call) Run(run func(ctx context.Context)) *Client_DetectPoolChanges_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Client_DetectPoolChanges_Call) Return(valCh <-chan struct{}, err error) *Client_DetectPoolChanges_Call {
	_c.Call.Return(valCh, err)
	return _c
}

func (_c *Client_DetectPoolChanges_Call) RunAndReturn(run func(ctx context.Context) (<-chan struct{}, error)) *Client_DetectPoolChanges_Call {
	_c.Call.Return(run)
	return _c
}

// GetIPAddressStatusForLease provides a mock function for the type Client
func (_mock *Client) GetIPAddressStatusForLease(ctx context.Context, leaseID v1.LeaseID) ([]ip.LeaseState, error) {
	ret := _mock.Called(ctx, leaseID)

	if len(ret) == 0 {
		panic("no return value specified for GetIPAddressStatusForLease")
	}

	var r0 []ip.LeaseState
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, v1.LeaseID) ([]ip.LeaseState, error)); ok {
		return returnFunc(ctx, leaseID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, v1.LeaseID) []ip.LeaseState); ok {
		r0 = returnFunc(ctx, leaseID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ip.LeaseState)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, v1.LeaseID) error); ok {
		r1 = returnFunc(ctx, leaseID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Client_GetIPAddressStatusForLease_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIPAddressStatusForLease'
type Client_GetIPAddressStatusForLease_Call struct {
	*mock.Call
}

// GetIPAddressStatusForLease is a helper method to define mock.On call
//   - ctx context.Context
//   - leaseID v1.LeaseID
func (_e *Client_Expecter) GetIPAddressStatusForLease(ctx interface{}, leaseID interface{}) *Client_GetIPAddressStatusForLease_Call {
	return &Client_GetIPAddressStatusForLease_Call{Call: _e.mock.On("GetIPAddressStatusForLease", ctx, leaseID)}
}

func (_c *Client_GetIPAddressStatusForLease_Call) Run(run func(ctx context.Context, leaseID v1.LeaseID)) *Client_GetIPAddressStatusForLease_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 v1.LeaseID
		if args[1] != nil {
			arg1 = args[1].(v1.LeaseID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Client_GetIPAddressStatusForLease_Call) Return(leaseStates []ip.LeaseState, err error) *Client_GetIPAddressStatusForLease_Call {
	_c.Call.Return(leaseStates, err)
	return _c
}

func (_c *Client_GetIPAddressStatusForLease_Call) RunAndReturn(run func(ctx context.Context, leaseID v1.LeaseID) ([]ip.LeaseState, error)) *Client_GetIPAddressStatusForLease_Call {
	_c.Call.Return(run)
	return _c
}

// GetIPAddressUsage provides a mock function for the type Client
func (_mock *Client) GetIPAddressUsage(ctx context.Context) (uint, uint, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetIPAddressUsage")
	}

	var r0 uint
	var r1 uint
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (uint, uint, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) uint); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(uint)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) uint); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Get(1).(uint)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context) error); ok {
		r2 = returnFunc(ctx)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// Client_GetIPAddressUsage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIPAddressUsage'
type Client_GetIPAddressUsage_Call struct {
	*mock.Call
}

// GetIPAddressUsage is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Client_Expecter) GetIPAddressUsage(ctx interface{}) *Client_GetIPAddressUsage_Call {
	return &Client_GetIPAddressUsage_Call{Call: _e.mock.On("GetIPAddressUsage", ctx)}
}

func (_c *Client_GetIPAddressUsage_Call) Run(run func(ctx context.Context)) *Client_GetIPAddressUsage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Client_GetIPAddressUsage_Call) Return(v uint, v2 uint, err error) *Client_GetIPAddressUsage_Call {
	_c.Call.Return(v, v2, err)
	return _c
}

func (_c *Client_GetIPAddressUsage_Call) RunAndReturn(run func(ctx context.Context) (uint, uint, error)) *Client_GetIPAddressUsage_Call {
	_c.Call.Return(run)
	return _c
}

// GetIPPassthroughs provides a mock function for the type Client
func (_mock *Client) GetIPPassthroughs(ctx context.Context) ([]ip.Passthrough, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetIPPassthroughs")
	}

	var r0 []ip.Passthrough
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]ip.Passthrough, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []ip.Passthrough); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ip.Passthrough)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Client_GetIPPassthroughs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIPPassthroughs'
type Client_GetIPPassthroughs_Call struct {
	*mock.Call
}

// GetIPPassthroughs is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Client_Expecter) GetIPPassthroughs(ctx interface{}) *Client_GetIPPassthroughs_Call {
	return &Client_GetIPPassthroughs_Call{Call: _e.mock.On("GetIPPassthroughs", ctx)}
}

func (_c *Client_GetIPPassthroughs_Call) Run(run func(ctx context.Context)) *Client_GetIPPassthroughs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Client_GetIPPassthroughs_Call) Return(passthroughs []ip.Passthrough, err error) *Client_GetIPPassthroughs_Call {
	_c.Call.Return(passthroughs, err)
	return _c
}

func (_c *Client_GetIPPassthroughs_Call) RunAndReturn(run func(ctx context.Context) ([]ip.Passthrough, error)) *Client_GetIPPassthroughs_Call {
	_c.Call.Return(run)
	return _c
}

// PurgeIPPassthrough provides a mock function for the type Client
func (_mock *Client) PurgeIPPassthrough(ctx context.Context, directive ip.ClusterIPPassthroughDirective) error {
	ret := _mock.Called(ctx, directive)

	if len(ret) == 0 {
		panic("no return value specified for PurgeIPPassthrough")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ip.ClusterIPPassthroughDirective) error); ok {
		r0 = returnFunc(ctx, directive)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Client_PurgeIPPassthrough_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PurgeIPPassthrough'
type Client_PurgeIPPassthrough_Call struct {
	*mock.Call
}

// PurgeIPPassthrough is a helper method to define mock.On call
//   - ctx context.Context
//   - directive ip.ClusterIPPassthroughDirective
func (_e *Client_Expecter) PurgeIPPassthrough(ctx interface{}, directive interface{}) *Client_PurgeIPPassthrough_Call {
	return &Client_PurgeIPPassthrough_Call{Call: _e.mock.On("PurgeIPPassthrough", ctx, directive)}
}

func (_c *Client_PurgeIPPassthrough_Call) Run(run func(ctx context.Context, directive ip.ClusterIPPassthroughDirective)) *Client_PurgeIPPassthrough_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 ip.ClusterIPPassthroughDirective
		if args[1] != nil {
			arg1 = args[1].(ip.ClusterIPPassthroughDirective)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Client_PurgeIPPassthrough_Call) Return(err error) *Client_PurgeIPPassthrough_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Client_PurgeIPPassthrough_Call) RunAndReturn(run func(ctx context.Context, directive ip.ClusterIPPassthroughDirective) error) *Client_PurgeIPPassthrough_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function for the type Client
func (_mock *Client) Stop() {
	_mock.Called()
	return
}

// Client_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type Client_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *Client_Expecter) Stop() *Client_Stop_Call {
	return &Client_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *Client_Stop_Call) Run(run func()) *Client_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Client_Stop_Call) Return() *Client_Stop_Call {
	_c.Call.Return()
	return _c
}

func (_c *Client_Stop_Call) RunAndReturn(run func()) *Client_Stop_Call {
	_c.Run(run)
	return _c
}
