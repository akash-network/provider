// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package cluster

import (
	"github.com/akash-network/provider/cluster/types/v1beta3"
	mock "github.com/stretchr/testify/mock"
	"pkg.akt.dev/go/node/deployment/v1beta4"
	"pkg.akt.dev/go/node/market/v1"
)

// NewCluster creates a new instance of Cluster. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCluster(t interface {
	mock.TestingT
	Cleanup(func())
}) *Cluster {
	mock := &Cluster{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Cluster is an autogenerated mock type for the Cluster type
type Cluster struct {
	mock.Mock
}

type Cluster_Expecter struct {
	mock *mock.Mock
}

func (_m *Cluster) EXPECT() *Cluster_Expecter {
	return &Cluster_Expecter{mock: &_m.Mock}
}

// Reserve provides a mock function for the type Cluster
func (_mock *Cluster) Reserve(orderID v1.OrderID, resourceGroup v1beta4.ResourceGroup) (v1beta3.Reservation, error) {
	ret := _mock.Called(orderID, resourceGroup)

	if len(ret) == 0 {
		panic("no return value specified for Reserve")
	}

	var r0 v1beta3.Reservation
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(v1.OrderID, v1beta4.ResourceGroup) (v1beta3.Reservation, error)); ok {
		return returnFunc(orderID, resourceGroup)
	}
	if returnFunc, ok := ret.Get(0).(func(v1.OrderID, v1beta4.ResourceGroup) v1beta3.Reservation); ok {
		r0 = returnFunc(orderID, resourceGroup)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1beta3.Reservation)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(v1.OrderID, v1beta4.ResourceGroup) error); ok {
		r1 = returnFunc(orderID, resourceGroup)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Cluster_Reserve_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Reserve'
type Cluster_Reserve_Call struct {
	*mock.Call
}

// Reserve is a helper method to define mock.On call
//   - orderID v1.OrderID
//   - resourceGroup v1beta4.ResourceGroup
func (_e *Cluster_Expecter) Reserve(orderID interface{}, resourceGroup interface{}) *Cluster_Reserve_Call {
	return &Cluster_Reserve_Call{Call: _e.mock.On("Reserve", orderID, resourceGroup)}
}

func (_c *Cluster_Reserve_Call) Run(run func(orderID v1.OrderID, resourceGroup v1beta4.ResourceGroup)) *Cluster_Reserve_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 v1.OrderID
		if args[0] != nil {
			arg0 = args[0].(v1.OrderID)
		}
		var arg1 v1beta4.ResourceGroup
		if args[1] != nil {
			arg1 = args[1].(v1beta4.ResourceGroup)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Cluster_Reserve_Call) Return(reservation v1beta3.Reservation, err error) *Cluster_Reserve_Call {
	_c.Call.Return(reservation, err)
	return _c
}

func (_c *Cluster_Reserve_Call) RunAndReturn(run func(orderID v1.OrderID, resourceGroup v1beta4.ResourceGroup) (v1beta3.Reservation, error)) *Cluster_Reserve_Call {
	_c.Call.Return(run)
	return _c
}

// Unreserve provides a mock function for the type Cluster
func (_mock *Cluster) Unreserve(orderID v1.OrderID) error {
	ret := _mock.Called(orderID)

	if len(ret) == 0 {
		panic("no return value specified for Unreserve")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(v1.OrderID) error); ok {
		r0 = returnFunc(orderID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Cluster_Unreserve_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Unreserve'
type Cluster_Unreserve_Call struct {
	*mock.Call
}

// Unreserve is a helper method to define mock.On call
//   - orderID v1.OrderID
func (_e *Cluster_Expecter) Unreserve(orderID interface{}) *Cluster_Unreserve_Call {
	return &Cluster_Unreserve_Call{Call: _e.mock.On("Unreserve", orderID)}
}

func (_c *Cluster_Unreserve_Call) Run(run func(orderID v1.OrderID)) *Cluster_Unreserve_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 v1.OrderID
		if args[0] != nil {
			arg0 = args[0].(v1.OrderID)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Cluster_Unreserve_Call) Return(err error) *Cluster_Unreserve_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Cluster_Unreserve_Call) RunAndReturn(run func(orderID v1.OrderID) error) *Cluster_Unreserve_Call {
	_c.Call.Return(run)
	return _c
}
