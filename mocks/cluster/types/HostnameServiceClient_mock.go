// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package v1beta3

import (
	"context"

	"github.com/cosmos/cosmos-sdk/types"
	mock "github.com/stretchr/testify/mock"
	"pkg.akt.dev/go/node/market/v1"
)

// NewHostnameServiceClient creates a new instance of HostnameServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHostnameServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *HostnameServiceClient {
	mock := &HostnameServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// HostnameServiceClient is an autogenerated mock type for the HostnameServiceClient type
type HostnameServiceClient struct {
	mock.Mock
}

type HostnameServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *HostnameServiceClient) EXPECT() *HostnameServiceClient_Expecter {
	return &HostnameServiceClient_Expecter{mock: &_m.Mock}
}

// CanReserveHostnames provides a mock function for the type HostnameServiceClient
func (_mock *HostnameServiceClient) CanReserveHostnames(hostnames []string, ownerAddr types.Address) error {
	ret := _mock.Called(hostnames, ownerAddr)

	if len(ret) == 0 {
		panic("no return value specified for CanReserveHostnames")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func([]string, types.Address) error); ok {
		r0 = returnFunc(hostnames, ownerAddr)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// HostnameServiceClient_CanReserveHostnames_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CanReserveHostnames'
type HostnameServiceClient_CanReserveHostnames_Call struct {
	*mock.Call
}

// CanReserveHostnames is a helper method to define mock.On call
//   - hostnames []string
//   - ownerAddr types.Address
func (_e *HostnameServiceClient_Expecter) CanReserveHostnames(hostnames interface{}, ownerAddr interface{}) *HostnameServiceClient_CanReserveHostnames_Call {
	return &HostnameServiceClient_CanReserveHostnames_Call{Call: _e.mock.On("CanReserveHostnames", hostnames, ownerAddr)}
}

func (_c *HostnameServiceClient_CanReserveHostnames_Call) Run(run func(hostnames []string, ownerAddr types.Address)) *HostnameServiceClient_CanReserveHostnames_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []string
		if args[0] != nil {
			arg0 = args[0].([]string)
		}
		var arg1 types.Address
		if args[1] != nil {
			arg1 = args[1].(types.Address)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *HostnameServiceClient_CanReserveHostnames_Call) Return(err error) *HostnameServiceClient_CanReserveHostnames_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *HostnameServiceClient_CanReserveHostnames_Call) RunAndReturn(run func(hostnames []string, ownerAddr types.Address) error) *HostnameServiceClient_CanReserveHostnames_Call {
	_c.Call.Return(run)
	return _c
}

// PrepareHostnamesForTransfer provides a mock function for the type HostnameServiceClient
func (_mock *HostnameServiceClient) PrepareHostnamesForTransfer(ctx context.Context, hostnames []string, leaseID v1.LeaseID) error {
	ret := _mock.Called(ctx, hostnames, leaseID)

	if len(ret) == 0 {
		panic("no return value specified for PrepareHostnamesForTransfer")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []string, v1.LeaseID) error); ok {
		r0 = returnFunc(ctx, hostnames, leaseID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// HostnameServiceClient_PrepareHostnamesForTransfer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PrepareHostnamesForTransfer'
type HostnameServiceClient_PrepareHostnamesForTransfer_Call struct {
	*mock.Call
}

// PrepareHostnamesForTransfer is a helper method to define mock.On call
//   - ctx context.Context
//   - hostnames []string
//   - leaseID v1.LeaseID
func (_e *HostnameServiceClient_Expecter) PrepareHostnamesForTransfer(ctx interface{}, hostnames interface{}, leaseID interface{}) *HostnameServiceClient_PrepareHostnamesForTransfer_Call {
	return &HostnameServiceClient_PrepareHostnamesForTransfer_Call{Call: _e.mock.On("PrepareHostnamesForTransfer", ctx, hostnames, leaseID)}
}

func (_c *HostnameServiceClient_PrepareHostnamesForTransfer_Call) Run(run func(ctx context.Context, hostnames []string, leaseID v1.LeaseID)) *HostnameServiceClient_PrepareHostnamesForTransfer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []string
		if args[1] != nil {
			arg1 = args[1].([]string)
		}
		var arg2 v1.LeaseID
		if args[2] != nil {
			arg2 = args[2].(v1.LeaseID)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *HostnameServiceClient_PrepareHostnamesForTransfer_Call) Return(err error) *HostnameServiceClient_PrepareHostnamesForTransfer_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *HostnameServiceClient_PrepareHostnamesForTransfer_Call) RunAndReturn(run func(ctx context.Context, hostnames []string, leaseID v1.LeaseID) error) *HostnameServiceClient_PrepareHostnamesForTransfer_Call {
	_c.Call.Return(run)
	return _c
}

// ReleaseHostnames provides a mock function for the type HostnameServiceClient
func (_mock *HostnameServiceClient) ReleaseHostnames(leaseID v1.LeaseID) error {
	ret := _mock.Called(leaseID)

	if len(ret) == 0 {
		panic("no return value specified for ReleaseHostnames")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(v1.LeaseID) error); ok {
		r0 = returnFunc(leaseID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// HostnameServiceClient_ReleaseHostnames_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReleaseHostnames'
type HostnameServiceClient_ReleaseHostnames_Call struct {
	*mock.Call
}

// ReleaseHostnames is a helper method to define mock.On call
//   - leaseID v1.LeaseID
func (_e *HostnameServiceClient_Expecter) ReleaseHostnames(leaseID interface{}) *HostnameServiceClient_ReleaseHostnames_Call {
	return &HostnameServiceClient_ReleaseHostnames_Call{Call: _e.mock.On("ReleaseHostnames", leaseID)}
}

func (_c *HostnameServiceClient_ReleaseHostnames_Call) Run(run func(leaseID v1.LeaseID)) *HostnameServiceClient_ReleaseHostnames_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 v1.LeaseID
		if args[0] != nil {
			arg0 = args[0].(v1.LeaseID)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *HostnameServiceClient_ReleaseHostnames_Call) Return(err error) *HostnameServiceClient_ReleaseHostnames_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *HostnameServiceClient_ReleaseHostnames_Call) RunAndReturn(run func(leaseID v1.LeaseID) error) *HostnameServiceClient_ReleaseHostnames_Call {
	_c.Call.Return(run)
	return _c
}

// ReserveHostnames provides a mock function for the type HostnameServiceClient
func (_mock *HostnameServiceClient) ReserveHostnames(ctx context.Context, hostnames []string, leaseID v1.LeaseID) ([]string, error) {
	ret := _mock.Called(ctx, hostnames, leaseID)

	if len(ret) == 0 {
		panic("no return value specified for ReserveHostnames")
	}

	var r0 []string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []string, v1.LeaseID) ([]string, error)); ok {
		return returnFunc(ctx, hostnames, leaseID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []string, v1.LeaseID) []string); ok {
		r0 = returnFunc(ctx, hostnames, leaseID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []string, v1.LeaseID) error); ok {
		r1 = returnFunc(ctx, hostnames, leaseID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// HostnameServiceClient_ReserveHostnames_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReserveHostnames'
type HostnameServiceClient_ReserveHostnames_Call struct {
	*mock.Call
}

// ReserveHostnames is a helper method to define mock.On call
//   - ctx context.Context
//   - hostnames []string
//   - leaseID v1.LeaseID
func (_e *HostnameServiceClient_Expecter) ReserveHostnames(ctx interface{}, hostnames interface{}, leaseID interface{}) *HostnameServiceClient_ReserveHostnames_Call {
	return &HostnameServiceClient_ReserveHostnames_Call{Call: _e.mock.On("ReserveHostnames", ctx, hostnames, leaseID)}
}

func (_c *HostnameServiceClient_ReserveHostnames_Call) Run(run func(ctx context.Context, hostnames []string, leaseID v1.LeaseID)) *HostnameServiceClient_ReserveHostnames_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []string
		if args[1] != nil {
			arg1 = args[1].([]string)
		}
		var arg2 v1.LeaseID
		if args[2] != nil {
			arg2 = args[2].(v1.LeaseID)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *HostnameServiceClient_ReserveHostnames_Call) Return(strings []string, err error) *HostnameServiceClient_ReserveHostnames_Call {
	_c.Call.Return(strings, err)
	return _c
}

func (_c *HostnameServiceClient_ReserveHostnames_Call) RunAndReturn(run func(ctx context.Context, hostnames []string, leaseID v1.LeaseID) ([]string, error)) *HostnameServiceClient_ReserveHostnames_Call {
	_c.Call.Return(run)
	return _c
}
