// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package v1beta3

import (
	mock "github.com/stretchr/testify/mock"
	"pkg.akt.dev/go/node/deployment/v1beta4"
)

// NewReservationGroup creates a new instance of ReservationGroup. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReservationGroup(t interface {
	mock.TestingT
	Cleanup(func())
}) *ReservationGroup {
	mock := &ReservationGroup{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ReservationGroup is an autogenerated mock type for the ReservationGroup type
type ReservationGroup struct {
	mock.Mock
}

type ReservationGroup_Expecter struct {
	mock *mock.Mock
}

func (_m *ReservationGroup) EXPECT() *ReservationGroup_Expecter {
	return &ReservationGroup_Expecter{mock: &_m.Mock}
}

// ClusterParams provides a mock function for the type ReservationGroup
func (_mock *ReservationGroup) ClusterParams() interface{} {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ClusterParams")
	}

	var r0 interface{}
	if returnFunc, ok := ret.Get(0).(func() interface{}); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}
	return r0
}

// ReservationGroup_ClusterParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClusterParams'
type ReservationGroup_ClusterParams_Call struct {
	*mock.Call
}

// ClusterParams is a helper method to define mock.On call
func (_e *ReservationGroup_Expecter) ClusterParams() *ReservationGroup_ClusterParams_Call {
	return &ReservationGroup_ClusterParams_Call{Call: _e.mock.On("ClusterParams")}
}

func (_c *ReservationGroup_ClusterParams_Call) Run(run func()) *ReservationGroup_ClusterParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ReservationGroup_ClusterParams_Call) Return(ifaceVal interface{}) *ReservationGroup_ClusterParams_Call {
	_c.Call.Return(ifaceVal)
	return _c
}

func (_c *ReservationGroup_ClusterParams_Call) RunAndReturn(run func() interface{}) *ReservationGroup_ClusterParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllocatedResources provides a mock function for the type ReservationGroup
func (_mock *ReservationGroup) GetAllocatedResources() v1beta4.ResourceUnits {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllocatedResources")
	}

	var r0 v1beta4.ResourceUnits
	if returnFunc, ok := ret.Get(0).(func() v1beta4.ResourceUnits); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1beta4.ResourceUnits)
		}
	}
	return r0
}

// ReservationGroup_GetAllocatedResources_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllocatedResources'
type ReservationGroup_GetAllocatedResources_Call struct {
	*mock.Call
}

// GetAllocatedResources is a helper method to define mock.On call
func (_e *ReservationGroup_Expecter) GetAllocatedResources() *ReservationGroup_GetAllocatedResources_Call {
	return &ReservationGroup_GetAllocatedResources_Call{Call: _e.mock.On("GetAllocatedResources")}
}

func (_c *ReservationGroup_GetAllocatedResources_Call) Run(run func()) *ReservationGroup_GetAllocatedResources_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ReservationGroup_GetAllocatedResources_Call) Return(resourceUnits v1beta4.ResourceUnits) *ReservationGroup_GetAllocatedResources_Call {
	_c.Call.Return(resourceUnits)
	return _c
}

func (_c *ReservationGroup_GetAllocatedResources_Call) RunAndReturn(run func() v1beta4.ResourceUnits) *ReservationGroup_GetAllocatedResources_Call {
	_c.Call.Return(run)
	return _c
}

// Resources provides a mock function for the type ReservationGroup
func (_mock *ReservationGroup) Resources() v1beta4.ResourceGroup {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Resources")
	}

	var r0 v1beta4.ResourceGroup
	if returnFunc, ok := ret.Get(0).(func() v1beta4.ResourceGroup); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1beta4.ResourceGroup)
		}
	}
	return r0
}

// ReservationGroup_Resources_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Resources'
type ReservationGroup_Resources_Call struct {
	*mock.Call
}

// Resources is a helper method to define mock.On call
func (_e *ReservationGroup_Expecter) Resources() *ReservationGroup_Resources_Call {
	return &ReservationGroup_Resources_Call{Call: _e.mock.On("Resources")}
}

func (_c *ReservationGroup_Resources_Call) Run(run func()) *ReservationGroup_Resources_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ReservationGroup_Resources_Call) Return(resourceGroup v1beta4.ResourceGroup) *ReservationGroup_Resources_Call {
	_c.Call.Return(resourceGroup)
	return _c
}

func (_c *ReservationGroup_Resources_Call) RunAndReturn(run func() v1beta4.ResourceGroup) *ReservationGroup_Resources_Call {
	_c.Call.Return(run)
	return _c
}

// SetAllocatedResources provides a mock function for the type ReservationGroup
func (_mock *ReservationGroup) SetAllocatedResources(resourceUnits v1beta4.ResourceUnits) {
	_mock.Called(resourceUnits)
	return
}

// ReservationGroup_SetAllocatedResources_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetAllocatedResources'
type ReservationGroup_SetAllocatedResources_Call struct {
	*mock.Call
}

// SetAllocatedResources is a helper method to define mock.On call
//   - resourceUnits v1beta4.ResourceUnits
func (_e *ReservationGroup_Expecter) SetAllocatedResources(resourceUnits interface{}) *ReservationGroup_SetAllocatedResources_Call {
	return &ReservationGroup_SetAllocatedResources_Call{Call: _e.mock.On("SetAllocatedResources", resourceUnits)}
}

func (_c *ReservationGroup_SetAllocatedResources_Call) Run(run func(resourceUnits v1beta4.ResourceUnits)) *ReservationGroup_SetAllocatedResources_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 v1beta4.ResourceUnits
		if args[0] != nil {
			arg0 = args[0].(v1beta4.ResourceUnits)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ReservationGroup_SetAllocatedResources_Call) Return() *ReservationGroup_SetAllocatedResources_Call {
	_c.Call.Return()
	return _c
}

func (_c *ReservationGroup_SetAllocatedResources_Call) RunAndReturn(run func(resourceUnits v1beta4.ResourceUnits)) *ReservationGroup_SetAllocatedResources_Call {
	_c.Run(run)
	return _c
}

// SetClusterParams provides a mock function for the type ReservationGroup
func (_mock *ReservationGroup) SetClusterParams(ifaceVal interface{}) {
	_mock.Called(ifaceVal)
	return
}

// ReservationGroup_SetClusterParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetClusterParams'
type ReservationGroup_SetClusterParams_Call struct {
	*mock.Call
}

// SetClusterParams is a helper method to define mock.On call
//   - ifaceVal interface{}
func (_e *ReservationGroup_Expecter) SetClusterParams(ifaceVal interface{}) *ReservationGroup_SetClusterParams_Call {
	return &ReservationGroup_SetClusterParams_Call{Call: _e.mock.On("SetClusterParams", ifaceVal)}
}

func (_c *ReservationGroup_SetClusterParams_Call) Run(run func(ifaceVal interface{})) *ReservationGroup_SetClusterParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 interface{}
		if args[0] != nil {
			arg0 = args[0].(interface{})
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ReservationGroup_SetClusterParams_Call) Return() *ReservationGroup_SetClusterParams_Call {
	_c.Call.Return()
	return _c
}

func (_c *ReservationGroup_SetClusterParams_Call) RunAndReturn(run func(ifaceVal interface{})) *ReservationGroup_SetClusterParams_Call {
	_c.Run(run)
	return _c
}
