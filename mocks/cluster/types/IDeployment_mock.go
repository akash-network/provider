// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package v1beta3

import (
	mock "github.com/stretchr/testify/mock"
	"pkg.akt.dev/go/manifest/v2beta3"
	"pkg.akt.dev/go/node/market/v1"
)

// NewIDeployment creates a new instance of IDeployment. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIDeployment(t interface {
	mock.TestingT
	Cleanup(func())
}) *IDeployment {
	mock := &IDeployment{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// IDeployment is an autogenerated mock type for the IDeployment type
type IDeployment struct {
	mock.Mock
}

type IDeployment_Expecter struct {
	mock *mock.Mock
}

func (_m *IDeployment) EXPECT() *IDeployment_Expecter {
	return &IDeployment_Expecter{mock: &_m.Mock}
}

// ClusterParams provides a mock function for the type IDeployment
func (_mock *IDeployment) ClusterParams() interface{} {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ClusterParams")
	}

	var r0 interface{}
	if returnFunc, ok := ret.Get(0).(func() interface{}); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}
	return r0
}

// IDeployment_ClusterParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClusterParams'
type IDeployment_ClusterParams_Call struct {
	*mock.Call
}

// ClusterParams is a helper method to define mock.On call
func (_e *IDeployment_Expecter) ClusterParams() *IDeployment_ClusterParams_Call {
	return &IDeployment_ClusterParams_Call{Call: _e.mock.On("ClusterParams")}
}

func (_c *IDeployment_ClusterParams_Call) Run(run func()) *IDeployment_ClusterParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IDeployment_ClusterParams_Call) Return(ifaceVal interface{}) *IDeployment_ClusterParams_Call {
	_c.Call.Return(ifaceVal)
	return _c
}

func (_c *IDeployment_ClusterParams_Call) RunAndReturn(run func() interface{}) *IDeployment_ClusterParams_Call {
	_c.Call.Return(run)
	return _c
}

// LeaseID provides a mock function for the type IDeployment
func (_mock *IDeployment) LeaseID() v1.LeaseID {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for LeaseID")
	}

	var r0 v1.LeaseID
	if returnFunc, ok := ret.Get(0).(func() v1.LeaseID); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(v1.LeaseID)
	}
	return r0
}

// IDeployment_LeaseID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LeaseID'
type IDeployment_LeaseID_Call struct {
	*mock.Call
}

// LeaseID is a helper method to define mock.On call
func (_e *IDeployment_Expecter) LeaseID() *IDeployment_LeaseID_Call {
	return &IDeployment_LeaseID_Call{Call: _e.mock.On("LeaseID")}
}

func (_c *IDeployment_LeaseID_Call) Run(run func()) *IDeployment_LeaseID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IDeployment_LeaseID_Call) Return(leaseID v1.LeaseID) *IDeployment_LeaseID_Call {
	_c.Call.Return(leaseID)
	return _c
}

func (_c *IDeployment_LeaseID_Call) RunAndReturn(run func() v1.LeaseID) *IDeployment_LeaseID_Call {
	_c.Call.Return(run)
	return _c
}

// ManifestGroup provides a mock function for the type IDeployment
func (_mock *IDeployment) ManifestGroup() *v2beta3.Group {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ManifestGroup")
	}

	var r0 *v2beta3.Group
	if returnFunc, ok := ret.Get(0).(func() *v2beta3.Group); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2beta3.Group)
		}
	}
	return r0
}

// IDeployment_ManifestGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ManifestGroup'
type IDeployment_ManifestGroup_Call struct {
	*mock.Call
}

// ManifestGroup is a helper method to define mock.On call
func (_e *IDeployment_Expecter) ManifestGroup() *IDeployment_ManifestGroup_Call {
	return &IDeployment_ManifestGroup_Call{Call: _e.mock.On("ManifestGroup")}
}

func (_c *IDeployment_ManifestGroup_Call) Run(run func()) *IDeployment_ManifestGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IDeployment_ManifestGroup_Call) Return(group *v2beta3.Group) *IDeployment_ManifestGroup_Call {
	_c.Call.Return(group)
	return _c
}

func (_c *IDeployment_ManifestGroup_Call) RunAndReturn(run func() *v2beta3.Group) *IDeployment_ManifestGroup_Call {
	_c.Call.Return(run)
	return _c
}

// ResourceVersion provides a mock function for the type IDeployment
func (_mock *IDeployment) ResourceVersion() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ResourceVersion")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// IDeployment_ResourceVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResourceVersion'
type IDeployment_ResourceVersion_Call struct {
	*mock.Call
}

// ResourceVersion is a helper method to define mock.On call
func (_e *IDeployment_Expecter) ResourceVersion() *IDeployment_ResourceVersion_Call {
	return &IDeployment_ResourceVersion_Call{Call: _e.mock.On("ResourceVersion")}
}

func (_c *IDeployment_ResourceVersion_Call) Run(run func()) *IDeployment_ResourceVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IDeployment_ResourceVersion_Call) Return(s string) *IDeployment_ResourceVersion_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *IDeployment_ResourceVersion_Call) RunAndReturn(run func() string) *IDeployment_ResourceVersion_Call {
	_c.Call.Return(run)
	return _c
}
