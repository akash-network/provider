// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package ip

import (
	"context"

	"github.com/akash-network/provider/cluster/types/v1beta3/clients/ip"
	mock "github.com/stretchr/testify/mock"
	"pkg.akt.dev/go/node/market/v1"
)

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

type Client_Expecter struct {
	mock *mock.Mock
}

func (_m *Client) EXPECT() *Client_Expecter {
	return &Client_Expecter{mock: &_m.Mock}
}

// Check provides a mock function for the type Client
func (_mock *Client) Check(context1 context.Context) error {
	ret := _mock.Called(context1)

	if len(ret) == 0 {
		panic("no return value specified for Check")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(context1)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Client_Check_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Check'
type Client_Check_Call struct {
	*mock.Call
}

// Check is a helper method to define mock.On call
//   - context1 context.Context
func (_e *Client_Expecter) Check(context1 interface{}) *Client_Check_Call {
	return &Client_Check_Call{Call: _e.mock.On("Check", context1)}
}

func (_c *Client_Check_Call) Run(run func(context1 context.Context)) *Client_Check_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Client_Check_Call) Return(err error) *Client_Check_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Client_Check_Call) RunAndReturn(run func(context1 context.Context) error) *Client_Check_Call {
	_c.Call.Return(run)
	return _c
}

// GetIPAddressStatus provides a mock function for the type Client
func (_mock *Client) GetIPAddressStatus(context1 context.Context, orderID v1.OrderID) ([]ip.LeaseIPStatus, error) {
	ret := _mock.Called(context1, orderID)

	if len(ret) == 0 {
		panic("no return value specified for GetIPAddressStatus")
	}

	var r0 []ip.LeaseIPStatus
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, v1.OrderID) ([]ip.LeaseIPStatus, error)); ok {
		return returnFunc(context1, orderID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, v1.OrderID) []ip.LeaseIPStatus); ok {
		r0 = returnFunc(context1, orderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ip.LeaseIPStatus)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, v1.OrderID) error); ok {
		r1 = returnFunc(context1, orderID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Client_GetIPAddressStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIPAddressStatus'
type Client_GetIPAddressStatus_Call struct {
	*mock.Call
}

// GetIPAddressStatus is a helper method to define mock.On call
//   - context1 context.Context
//   - orderID v1.OrderID
func (_e *Client_Expecter) GetIPAddressStatus(context1 interface{}, orderID interface{}) *Client_GetIPAddressStatus_Call {
	return &Client_GetIPAddressStatus_Call{Call: _e.mock.On("GetIPAddressStatus", context1, orderID)}
}

func (_c *Client_GetIPAddressStatus_Call) Run(run func(context1 context.Context, orderID v1.OrderID)) *Client_GetIPAddressStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 v1.OrderID
		if args[1] != nil {
			arg1 = args[1].(v1.OrderID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Client_GetIPAddressStatus_Call) Return(leaseIPStatuss []ip.LeaseIPStatus, err error) *Client_GetIPAddressStatus_Call {
	_c.Call.Return(leaseIPStatuss, err)
	return _c
}

func (_c *Client_GetIPAddressStatus_Call) RunAndReturn(run func(context1 context.Context, orderID v1.OrderID) ([]ip.LeaseIPStatus, error)) *Client_GetIPAddressStatus_Call {
	_c.Call.Return(run)
	return _c
}

// GetIPAddressUsage provides a mock function for the type Client
func (_mock *Client) GetIPAddressUsage(context1 context.Context) (ip.AddressUsage, error) {
	ret := _mock.Called(context1)

	if len(ret) == 0 {
		panic("no return value specified for GetIPAddressUsage")
	}

	var r0 ip.AddressUsage
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (ip.AddressUsage, error)); ok {
		return returnFunc(context1)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) ip.AddressUsage); ok {
		r0 = returnFunc(context1)
	} else {
		r0 = ret.Get(0).(ip.AddressUsage)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(context1)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Client_GetIPAddressUsage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIPAddressUsage'
type Client_GetIPAddressUsage_Call struct {
	*mock.Call
}

// GetIPAddressUsage is a helper method to define mock.On call
//   - context1 context.Context
func (_e *Client_Expecter) GetIPAddressUsage(context1 interface{}) *Client_GetIPAddressUsage_Call {
	return &Client_GetIPAddressUsage_Call{Call: _e.mock.On("GetIPAddressUsage", context1)}
}

func (_c *Client_GetIPAddressUsage_Call) Run(run func(context1 context.Context)) *Client_GetIPAddressUsage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Client_GetIPAddressUsage_Call) Return(addressUsage ip.AddressUsage, err error) *Client_GetIPAddressUsage_Call {
	_c.Call.Return(addressUsage, err)
	return _c
}

func (_c *Client_GetIPAddressUsage_Call) RunAndReturn(run func(context1 context.Context) (ip.AddressUsage, error)) *Client_GetIPAddressUsage_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function for the type Client
func (_mock *Client) Stop() {
	_mock.Called()
	return
}

// Client_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type Client_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *Client_Expecter) Stop() *Client_Stop_Call {
	return &Client_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *Client_Stop_Call) Run(run func()) *Client_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Client_Stop_Call) Return() *Client_Stop_Call {
	_c.Call.Return()
	return _c
}

func (_c *Client_Stop_Call) RunAndReturn(run func()) *Client_Stop_Call {
	_c.Run(run)
	return _c
}

// String provides a mock function for the type Client
func (_mock *Client) String() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for String")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// Client_String_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'String'
type Client_String_Call struct {
	*mock.Call
}

// String is a helper method to define mock.On call
func (_e *Client_Expecter) String() *Client_String_Call {
	return &Client_String_Call{Call: _e.mock.On("String")}
}

func (_c *Client_String_Call) Run(run func()) *Client_String_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Client_String_Call) Return(s string) *Client_String_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *Client_String_Call) RunAndReturn(run func() string) *Client_String_Call {
	_c.Call.Return(run)
	return _c
}
