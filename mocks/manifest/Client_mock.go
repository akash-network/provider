// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package manifest

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"pkg.akt.dev/go/manifest/v2beta3"
	"pkg.akt.dev/go/node/deployment/v1"
)

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

type Client_Expecter struct {
	mock *mock.Mock
}

func (_m *Client) EXPECT() *Client_Expecter {
	return &Client_Expecter{mock: &_m.Mock}
}

// IsActive provides a mock function for the type Client
func (_mock *Client) IsActive(context1 context.Context, deploymentID v1.DeploymentID) (bool, error) {
	ret := _mock.Called(context1, deploymentID)

	if len(ret) == 0 {
		panic("no return value specified for IsActive")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, v1.DeploymentID) (bool, error)); ok {
		return returnFunc(context1, deploymentID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, v1.DeploymentID) bool); ok {
		r0 = returnFunc(context1, deploymentID)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, v1.DeploymentID) error); ok {
		r1 = returnFunc(context1, deploymentID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Client_IsActive_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsActive'
type Client_IsActive_Call struct {
	*mock.Call
}

// IsActive is a helper method to define mock.On call
//   - context1 context.Context
//   - deploymentID v1.DeploymentID
func (_e *Client_Expecter) IsActive(context1 interface{}, deploymentID interface{}) *Client_IsActive_Call {
	return &Client_IsActive_Call{Call: _e.mock.On("IsActive", context1, deploymentID)}
}

func (_c *Client_IsActive_Call) Run(run func(context1 context.Context, deploymentID v1.DeploymentID)) *Client_IsActive_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 v1.DeploymentID
		if args[1] != nil {
			arg1 = args[1].(v1.DeploymentID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Client_IsActive_Call) Return(b bool, err error) *Client_IsActive_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *Client_IsActive_Call) RunAndReturn(run func(context1 context.Context, deploymentID v1.DeploymentID) (bool, error)) *Client_IsActive_Call {
	_c.Call.Return(run)
	return _c
}

// Submit provides a mock function for the type Client
func (_mock *Client) Submit(context1 context.Context, deploymentID v1.DeploymentID, manifest v2beta3.Manifest) error {
	ret := _mock.Called(context1, deploymentID, manifest)

	if len(ret) == 0 {
		panic("no return value specified for Submit")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, v1.DeploymentID, v2beta3.Manifest) error); ok {
		r0 = returnFunc(context1, deploymentID, manifest)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Client_Submit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Submit'
type Client_Submit_Call struct {
	*mock.Call
}

// Submit is a helper method to define mock.On call
//   - context1 context.Context
//   - deploymentID v1.DeploymentID
//   - manifest v2beta3.Manifest
func (_e *Client_Expecter) Submit(context1 interface{}, deploymentID interface{}, manifest interface{}) *Client_Submit_Call {
	return &Client_Submit_Call{Call: _e.mock.On("Submit", context1, deploymentID, manifest)}
}

func (_c *Client_Submit_Call) Run(run func(context1 context.Context, deploymentID v1.DeploymentID, manifest v2beta3.Manifest)) *Client_Submit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 v1.DeploymentID
		if args[1] != nil {
			arg1 = args[1].(v1.DeploymentID)
		}
		var arg2 v2beta3.Manifest
		if args[2] != nil {
			arg2 = args[2].(v2beta3.Manifest)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *Client_Submit_Call) Return(err error) *Client_Submit_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Client_Submit_Call) RunAndReturn(run func(context1 context.Context, deploymentID v1.DeploymentID, manifest v2beta3.Manifest) error) *Client_Submit_Call {
	_c.Call.Return(run)
	return _c
}
