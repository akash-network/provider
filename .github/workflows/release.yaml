name: release

defaults:
  run:
    shell: bash

on:
  push:
    tags:
      - v*

jobs:
  goreleaser:
    runs-on: ubuntu-latest
    env:
      DOCKER_CLI_EXPERIMENTAL: "enabled"
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: c-py/action-dotenv-to-setenv@v3
        with:
          env-file: .env
      - uses: actions/setup-go@v3
        with:
          go-version: "${{ env.GOLANG_VERSION }}"
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: release version
        run: echo "RELEASE_TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
      - name: release dry-run
        run: make release
      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: release publish
        run: |
          sudo rm -rf dist
          make release
        env:
          GORELEASER_RELEASE: true
          GORELEASER_MOUNT_CONFIG: true
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  homebrew:
    runs-on: ubuntu-latest
    needs: [ goreleaser ]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: release version
        run: echo "RELEASE_TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
      - name: check if pre-release
        id: check
        run: |
          is_prerelease=$(./script/is_prerelease.sh ${{ env.RELEASE_TAG }}; echo $?)
          echo "is_prerelease=${is_prerelease}" >> $GITHUB_OUTPUT
      - name: notify homebrew with a new release
        if: contains(steps.check.outputs.is_prerelease, '1')
        uses: benc-uk/workflow-dispatch@v1
        with:
          token: ${{ secrets.GORELEASER_ACCESS_TOKEN }}
          repo: akash-network/homebrew-tap
          ref: refs/heads/master
          workflow: provider-services
          inputs: '{"tag": "${{ env.RELEASE_TAG }}"}'
