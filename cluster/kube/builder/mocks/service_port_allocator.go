// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// ServicePortAllocator is an autogenerated mock type for the ServicePortAllocator type
type ServicePortAllocator struct {
	mock.Mock
}

type ServicePortAllocator_Expecter struct {
	mock *mock.Mock
}

func (_m *ServicePortAllocator) EXPECT() *ServicePortAllocator_Expecter {
	return &ServicePortAllocator_Expecter{mock: &_m.Mock}
}

// AllocatePorts provides a mock function with given fields: serviceName, count
func (_m *ServicePortAllocator) AllocatePorts(serviceName string, count int) []int32 {
	ret := _m.Called(serviceName, count)

	if len(ret) == 0 {
		panic("no return value specified for AllocatePorts")
	}

	var r0 []int32
	if rf, ok := ret.Get(0).(func(string, int) []int32); ok {
		r0 = rf(serviceName, count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int32)
		}
	}

	return r0
}

// ServicePortAllocator_AllocatePorts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AllocatePorts'
type ServicePortAllocator_AllocatePorts_Call struct {
	*mock.Call
}

// AllocatePorts is a helper method to define mock.On call
//   - serviceName string
//   - count int
func (_e *ServicePortAllocator_Expecter) AllocatePorts(serviceName interface{}, count interface{}) *ServicePortAllocator_AllocatePorts_Call {
	return &ServicePortAllocator_AllocatePorts_Call{Call: _e.mock.On("AllocatePorts", serviceName, count)}
}

func (_c *ServicePortAllocator_AllocatePorts_Call) Run(run func(serviceName string, count int)) *ServicePortAllocator_AllocatePorts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int))
	})
	return _c
}

func (_c *ServicePortAllocator_AllocatePorts_Call) Return(_a0 []int32) *ServicePortAllocator_AllocatePorts_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServicePortAllocator_AllocatePorts_Call) RunAndReturn(run func(string, int) []int32) *ServicePortAllocator_AllocatePorts_Call {
	_c.Call.Return(run)
	return _c
}

// NewServicePortAllocator creates a new instance of ServicePortAllocator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServicePortAllocator(t interface {
	mock.TestingT
	Cleanup(func())
}) *ServicePortAllocator {
	mock := &ServicePortAllocator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
