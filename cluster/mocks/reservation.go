// Code generated by mockery 2.12.1. DO NOT EDIT.

package mocks

import (
	nodetypesv1beta2 "github.com/akash-network/node/types/v1beta2"
	mock "github.com/stretchr/testify/mock"

	testing "testing"

	typesv1beta2 "github.com/akash-network/node/x/market/types/v1beta2"
)

// Reservation is an autogenerated mock type for the Reservation type
type Reservation struct {
	mock.Mock
}

// Allocated provides a mock function with given fields:
func (_m *Reservation) Allocated() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// OrderID provides a mock function with given fields:
func (_m *Reservation) OrderID() typesv1beta2.OrderID {
	ret := _m.Called()

	var r0 typesv1beta2.OrderID
	if rf, ok := ret.Get(0).(func() typesv1beta2.OrderID); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(typesv1beta2.OrderID)
	}

	return r0
}

// Resources provides a mock function with given fields:
func (_m *Reservation) Resources() nodetypesv1beta2.ResourceGroup {
	ret := _m.Called()

	var r0 nodetypesv1beta2.ResourceGroup
	if rf, ok := ret.Get(0).(func() nodetypesv1beta2.ResourceGroup); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(nodetypesv1beta2.ResourceGroup)
		}
	}

	return r0
}

// NewReservation creates a new instance of Reservation. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewReservation(t testing.TB) *Reservation {
	mock := &Reservation{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
