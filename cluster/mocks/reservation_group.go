// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	deploymentv1beta3 "github.com/akash-network/akash-api/go/node/deployment/v1beta3"
	mock "github.com/stretchr/testify/mock"
)

// ReservationGroup is an autogenerated mock type for the ReservationGroup type
type ReservationGroup struct {
	mock.Mock
}

type ReservationGroup_Expecter struct {
	mock *mock.Mock
}

func (_m *ReservationGroup) EXPECT() *ReservationGroup_Expecter {
	return &ReservationGroup_Expecter{mock: &_m.Mock}
}

// ClusterParams provides a mock function with given fields:
func (_m *ReservationGroup) ClusterParams() interface{} {
	ret := _m.Called()

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// ReservationGroup_ClusterParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClusterParams'
type ReservationGroup_ClusterParams_Call struct {
	*mock.Call
}

// ClusterParams is a helper method to define mock.On call
func (_e *ReservationGroup_Expecter) ClusterParams() *ReservationGroup_ClusterParams_Call {
	return &ReservationGroup_ClusterParams_Call{Call: _e.mock.On("ClusterParams")}
}

func (_c *ReservationGroup_ClusterParams_Call) Run(run func()) *ReservationGroup_ClusterParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ReservationGroup_ClusterParams_Call) Return(_a0 interface{}) *ReservationGroup_ClusterParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ReservationGroup_ClusterParams_Call) RunAndReturn(run func() interface{}) *ReservationGroup_ClusterParams_Call {
	_c.Call.Return(run)
	return _c
}

// Resources provides a mock function with given fields:
func (_m *ReservationGroup) Resources() deploymentv1beta3.ResourceGroup {
	ret := _m.Called()

	var r0 deploymentv1beta3.ResourceGroup
	if rf, ok := ret.Get(0).(func() deploymentv1beta3.ResourceGroup); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(deploymentv1beta3.ResourceGroup)
		}
	}

	return r0
}

// ReservationGroup_Resources_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Resources'
type ReservationGroup_Resources_Call struct {
	*mock.Call
}

// Resources is a helper method to define mock.On call
func (_e *ReservationGroup_Expecter) Resources() *ReservationGroup_Resources_Call {
	return &ReservationGroup_Resources_Call{Call: _e.mock.On("Resources")}
}

func (_c *ReservationGroup_Resources_Call) Run(run func()) *ReservationGroup_Resources_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ReservationGroup_Resources_Call) Return(_a0 deploymentv1beta3.ResourceGroup) *ReservationGroup_Resources_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ReservationGroup_Resources_Call) RunAndReturn(run func() deploymentv1beta3.ResourceGroup) *ReservationGroup_Resources_Call {
	_c.Call.Return(run)
	return _c
}

// SetAllocatedResources provides a mock function with given fields: _a0
func (_m *ReservationGroup) SetAllocatedResources(_a0 deploymentv1beta3.ResourceUnits) {
	_m.Called(_a0)
}

// ReservationGroup_SetAllocatedResources_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetAllocatedResources'
type ReservationGroup_SetAllocatedResources_Call struct {
	*mock.Call
}

// SetAllocatedResources is a helper method to define mock.On call
//   - _a0 deploymentv1beta3.ResourceUnits
func (_e *ReservationGroup_Expecter) SetAllocatedResources(_a0 interface{}) *ReservationGroup_SetAllocatedResources_Call {
	return &ReservationGroup_SetAllocatedResources_Call{Call: _e.mock.On("SetAllocatedResources", _a0)}
}

func (_c *ReservationGroup_SetAllocatedResources_Call) Run(run func(_a0 deploymentv1beta3.ResourceUnits)) *ReservationGroup_SetAllocatedResources_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(deploymentv1beta3.ResourceUnits))
	})
	return _c
}

func (_c *ReservationGroup_SetAllocatedResources_Call) Return() *ReservationGroup_SetAllocatedResources_Call {
	_c.Call.Return()
	return _c
}

func (_c *ReservationGroup_SetAllocatedResources_Call) RunAndReturn(run func(deploymentv1beta3.ResourceUnits)) *ReservationGroup_SetAllocatedResources_Call {
	_c.Call.Return(run)
	return _c
}

// SetClusterParams provides a mock function with given fields: _a0
func (_m *ReservationGroup) SetClusterParams(_a0 interface{}) {
	_m.Called(_a0)
}

// ReservationGroup_SetClusterParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetClusterParams'
type ReservationGroup_SetClusterParams_Call struct {
	*mock.Call
}

// SetClusterParams is a helper method to define mock.On call
//   - _a0 interface{}
func (_e *ReservationGroup_Expecter) SetClusterParams(_a0 interface{}) *ReservationGroup_SetClusterParams_Call {
	return &ReservationGroup_SetClusterParams_Call{Call: _e.mock.On("SetClusterParams", _a0)}
}

func (_c *ReservationGroup_SetClusterParams_Call) Run(run func(_a0 interface{})) *ReservationGroup_SetClusterParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *ReservationGroup_SetClusterParams_Call) Return() *ReservationGroup_SetClusterParams_Call {
	_c.Call.Return()
	return _c
}

func (_c *ReservationGroup_SetClusterParams_Call) RunAndReturn(run func(interface{})) *ReservationGroup_SetClusterParams_Call {
	_c.Call.Return(run)
	return _c
}

// NewReservationGroup creates a new instance of ReservationGroup. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReservationGroup(t interface {
	mock.TestingT
	Cleanup(func())
}) *ReservationGroup {
	mock := &ReservationGroup{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
