// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	types "github.com/akash-network/provider/operator/ipoperator/types"

	v1beta3 "github.com/akash-network/akash-api/go/node/market/v1beta3"
)

// IPOperatorClient is an autogenerated mock type for the IPOperatorClient type
type IPOperatorClient struct {
	mock.Mock
}

type IPOperatorClient_Expecter struct {
	mock *mock.Mock
}

func (_m *IPOperatorClient) EXPECT() *IPOperatorClient_Expecter {
	return &IPOperatorClient_Expecter{mock: &_m.Mock}
}

// Check provides a mock function with given fields: ctx
func (_m *IPOperatorClient) Check(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IPOperatorClient_Check_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Check'
type IPOperatorClient_Check_Call struct {
	*mock.Call
}

// Check is a helper method to define mock.On call
//   - ctx context.Context
func (_e *IPOperatorClient_Expecter) Check(ctx interface{}) *IPOperatorClient_Check_Call {
	return &IPOperatorClient_Check_Call{Call: _e.mock.On("Check", ctx)}
}

func (_c *IPOperatorClient_Check_Call) Run(run func(ctx context.Context)) *IPOperatorClient_Check_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *IPOperatorClient_Check_Call) Return(_a0 error) *IPOperatorClient_Check_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IPOperatorClient_Check_Call) RunAndReturn(run func(context.Context) error) *IPOperatorClient_Check_Call {
	_c.Call.Return(run)
	return _c
}

// GetIPAddressStatus provides a mock function with given fields: ctx, orderID
func (_m *IPOperatorClient) GetIPAddressStatus(ctx context.Context, orderID v1beta3.OrderID) ([]types.LeaseIPStatus, error) {
	ret := _m.Called(ctx, orderID)

	var r0 []types.LeaseIPStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, v1beta3.OrderID) ([]types.LeaseIPStatus, error)); ok {
		return rf(ctx, orderID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, v1beta3.OrderID) []types.LeaseIPStatus); ok {
		r0 = rf(ctx, orderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.LeaseIPStatus)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, v1beta3.OrderID) error); ok {
		r1 = rf(ctx, orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IPOperatorClient_GetIPAddressStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIPAddressStatus'
type IPOperatorClient_GetIPAddressStatus_Call struct {
	*mock.Call
}

// GetIPAddressStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - orderID v1beta3.OrderID
func (_e *IPOperatorClient_Expecter) GetIPAddressStatus(ctx interface{}, orderID interface{}) *IPOperatorClient_GetIPAddressStatus_Call {
	return &IPOperatorClient_GetIPAddressStatus_Call{Call: _e.mock.On("GetIPAddressStatus", ctx, orderID)}
}

func (_c *IPOperatorClient_GetIPAddressStatus_Call) Run(run func(ctx context.Context, orderID v1beta3.OrderID)) *IPOperatorClient_GetIPAddressStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(v1beta3.OrderID))
	})
	return _c
}

func (_c *IPOperatorClient_GetIPAddressStatus_Call) Return(_a0 []types.LeaseIPStatus, _a1 error) *IPOperatorClient_GetIPAddressStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IPOperatorClient_GetIPAddressStatus_Call) RunAndReturn(run func(context.Context, v1beta3.OrderID) ([]types.LeaseIPStatus, error)) *IPOperatorClient_GetIPAddressStatus_Call {
	_c.Call.Return(run)
	return _c
}

// GetIPAddressUsage provides a mock function with given fields: ctx
func (_m *IPOperatorClient) GetIPAddressUsage(ctx context.Context) (types.IPAddressUsage, error) {
	ret := _m.Called(ctx)

	var r0 types.IPAddressUsage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (types.IPAddressUsage, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) types.IPAddressUsage); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(types.IPAddressUsage)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IPOperatorClient_GetIPAddressUsage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIPAddressUsage'
type IPOperatorClient_GetIPAddressUsage_Call struct {
	*mock.Call
}

// GetIPAddressUsage is a helper method to define mock.On call
//   - ctx context.Context
func (_e *IPOperatorClient_Expecter) GetIPAddressUsage(ctx interface{}) *IPOperatorClient_GetIPAddressUsage_Call {
	return &IPOperatorClient_GetIPAddressUsage_Call{Call: _e.mock.On("GetIPAddressUsage", ctx)}
}

func (_c *IPOperatorClient_GetIPAddressUsage_Call) Run(run func(ctx context.Context)) *IPOperatorClient_GetIPAddressUsage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *IPOperatorClient_GetIPAddressUsage_Call) Return(_a0 types.IPAddressUsage, _a1 error) *IPOperatorClient_GetIPAddressUsage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IPOperatorClient_GetIPAddressUsage_Call) RunAndReturn(run func(context.Context) (types.IPAddressUsage, error)) *IPOperatorClient_GetIPAddressUsage_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with given fields:
func (_m *IPOperatorClient) Stop() {
	_m.Called()
}

// IPOperatorClient_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type IPOperatorClient_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *IPOperatorClient_Expecter) Stop() *IPOperatorClient_Stop_Call {
	return &IPOperatorClient_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *IPOperatorClient_Stop_Call) Run(run func()) *IPOperatorClient_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IPOperatorClient_Stop_Call) Return() *IPOperatorClient_Stop_Call {
	_c.Call.Return()
	return _c
}

func (_c *IPOperatorClient_Stop_Call) RunAndReturn(run func()) *IPOperatorClient_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// String provides a mock function with given fields:
func (_m *IPOperatorClient) String() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// IPOperatorClient_String_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'String'
type IPOperatorClient_String_Call struct {
	*mock.Call
}

// String is a helper method to define mock.On call
func (_e *IPOperatorClient_Expecter) String() *IPOperatorClient_String_Call {
	return &IPOperatorClient_String_Call{Call: _e.mock.On("String")}
}

func (_c *IPOperatorClient_String_Call) Run(run func()) *IPOperatorClient_String_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IPOperatorClient_String_Call) Return(_a0 string) *IPOperatorClient_String_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IPOperatorClient_String_Call) RunAndReturn(run func() string) *IPOperatorClient_String_Call {
	_c.Call.Return(run)
	return _c
}

// NewIPOperatorClient creates a new instance of IPOperatorClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIPOperatorClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IPOperatorClient {
	mock := &IPOperatorClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
