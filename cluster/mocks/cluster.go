// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	deploymentv1beta3 "github.com/akash-network/akash-api/go/node/deployment/v1beta3"
	mock "github.com/stretchr/testify/mock"

	typesv1beta3 "github.com/akash-network/provider/cluster/types/v1beta3"

	v1beta3 "github.com/akash-network/akash-api/go/node/market/v1beta3"
)

// Cluster is an autogenerated mock type for the Cluster type
type Cluster struct {
	mock.Mock
}

type Cluster_Expecter struct {
	mock *mock.Mock
}

func (_m *Cluster) EXPECT() *Cluster_Expecter {
	return &Cluster_Expecter{mock: &_m.Mock}
}

// Reserve provides a mock function with given fields: _a0, _a1
func (_m *Cluster) Reserve(_a0 v1beta3.OrderID, _a1 deploymentv1beta3.ResourceGroup) (typesv1beta3.Reservation, error) {
	ret := _m.Called(_a0, _a1)

	var r0 typesv1beta3.Reservation
	var r1 error
	if rf, ok := ret.Get(0).(func(v1beta3.OrderID, deploymentv1beta3.ResourceGroup) (typesv1beta3.Reservation, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(v1beta3.OrderID, deploymentv1beta3.ResourceGroup) typesv1beta3.Reservation); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(typesv1beta3.Reservation)
		}
	}

	if rf, ok := ret.Get(1).(func(v1beta3.OrderID, deploymentv1beta3.ResourceGroup) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Cluster_Reserve_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Reserve'
type Cluster_Reserve_Call struct {
	*mock.Call
}

// Reserve is a helper method to define mock.On call
//   - _a0 v1beta3.OrderID
//   - _a1 deploymentv1beta3.ResourceGroup
func (_e *Cluster_Expecter) Reserve(_a0 interface{}, _a1 interface{}) *Cluster_Reserve_Call {
	return &Cluster_Reserve_Call{Call: _e.mock.On("Reserve", _a0, _a1)}
}

func (_c *Cluster_Reserve_Call) Run(run func(_a0 v1beta3.OrderID, _a1 deploymentv1beta3.ResourceGroup)) *Cluster_Reserve_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(v1beta3.OrderID), args[1].(deploymentv1beta3.ResourceGroup))
	})
	return _c
}

func (_c *Cluster_Reserve_Call) Return(_a0 typesv1beta3.Reservation, _a1 error) *Cluster_Reserve_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Cluster_Reserve_Call) RunAndReturn(run func(v1beta3.OrderID, deploymentv1beta3.ResourceGroup) (typesv1beta3.Reservation, error)) *Cluster_Reserve_Call {
	_c.Call.Return(run)
	return _c
}

// Unreserve provides a mock function with given fields: _a0
func (_m *Cluster) Unreserve(_a0 v1beta3.OrderID) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(v1beta3.OrderID) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Cluster_Unreserve_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Unreserve'
type Cluster_Unreserve_Call struct {
	*mock.Call
}

// Unreserve is a helper method to define mock.On call
//   - _a0 v1beta3.OrderID
func (_e *Cluster_Expecter) Unreserve(_a0 interface{}) *Cluster_Unreserve_Call {
	return &Cluster_Unreserve_Call{Call: _e.mock.On("Unreserve", _a0)}
}

func (_c *Cluster_Unreserve_Call) Run(run func(_a0 v1beta3.OrderID)) *Cluster_Unreserve_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(v1beta3.OrderID))
	})
	return _c
}

func (_c *Cluster_Unreserve_Call) Return(_a0 error) *Cluster_Unreserve_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Cluster_Unreserve_Call) RunAndReturn(run func(v1beta3.OrderID) error) *Cluster_Unreserve_Call {
	_c.Call.Return(run)
	return _c
}

// NewCluster creates a new instance of Cluster. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCluster(t interface {
	mock.TestingT
	Cleanup(func())
}) *Cluster {
	mock := &Cluster{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
